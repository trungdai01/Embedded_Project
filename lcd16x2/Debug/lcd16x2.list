
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e4  080050e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080050e4  080050e4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e4  080050e4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080050ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000005c  08005148  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005148  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e88f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002560  00000000  00000000  0002e957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00030eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca2  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b0a  00000000  00000000  00032b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001256b  00000000  00000000  0004b664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cbdc  00000000  00000000  0005dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048d0  00000000  00000000  000ea7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000ef07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ff8 	.word	0x08004ff8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004ff8 	.word	0x08004ff8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dht20_init>:

uint16_t value_x10[2] = {0, 0};
char temp[20], humid[20];
int status = INIT;

void dht20_init(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
	//Set register when call a wrong reset
	uint8_t init[3];

	init[0] = 0xA8;
 8000162:	23a8      	movs	r3, #168	; 0xa8
 8000164:	713b      	strb	r3, [r7, #4]
	init[1] = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 800016e:	1d3a      	adds	r2, r7, #4
 8000170:	23ff      	movs	r3, #255	; 0xff
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2303      	movs	r3, #3
 8000176:	2170      	movs	r1, #112	; 0x70
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <dht20_init+0x54>)
 800017a:	f001 fd53 	bl	8001c24 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800017e:	2014      	movs	r0, #20
 8000180:	f001 f88e 	bl	80012a0 <HAL_Delay>

	init[0] = 0xBE;
 8000184:	23be      	movs	r3, #190	; 0xbe
 8000186:	713b      	strb	r3, [r7, #4]
	init[1] = 0x08;
 8000188:	2308      	movs	r3, #8
 800018a:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800018c:	2300      	movs	r3, #0
 800018e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8000190:	1d3a      	adds	r2, r7, #4
 8000192:	23ff      	movs	r3, #255	; 0xff
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2303      	movs	r3, #3
 8000198:	2170      	movs	r1, #112	; 0x70
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <dht20_init+0x54>)
 800019c:	f001 fd42 	bl	8001c24 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80001a0:	2014      	movs	r0, #20
 80001a2:	f001 f87d 	bl	80012a0 <HAL_Delay>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200000a8 	.word	0x200000a8

080001b4 <dht20_reset>:

void dht20_reset(uint8_t regist){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//reset register
	uint8_t reset[3], reply[3];

	reset[0] = regist;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	733b      	strb	r3, [r7, #12]
	reset[1] = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	737b      	strb	r3, [r7, #13]
	reset[2] = 0x00;
 80001c6:	2300      	movs	r3, #0
 80001c8:	73bb      	strb	r3, [r7, #14]
 	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 80001ca:	f107 020c 	add.w	r2, r7, #12
 80001ce:	23ff      	movs	r3, #255	; 0xff
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2303      	movs	r3, #3
 80001d4:	2170      	movs	r1, #112	; 0x70
 80001d6:	4814      	ldr	r0, [pc, #80]	; (8000228 <dht20_reset+0x74>)
 80001d8:	f001 fd24 	bl	8001c24 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80001dc:	200a      	movs	r0, #10
 80001de:	f001 f85f 	bl	80012a0 <HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) reply, 3, 0xFF);
 80001e2:	f107 0208 	add.w	r2, r7, #8
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2303      	movs	r3, #3
 80001ec:	2171      	movs	r1, #113	; 0x71
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <dht20_reset+0x74>)
 80001f0:	f001 fe16 	bl	8001e20 <HAL_I2C_Master_Receive>
	reset[0] = 0xB0 | regist;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	733b      	strb	r3, [r7, #12]
	reset[1] = reply[1];
 80001fe:	7a7b      	ldrb	r3, [r7, #9]
 8000200:	737b      	strb	r3, [r7, #13]
	reset[2] = reply[2];
 8000202:	7abb      	ldrb	r3, [r7, #10]
 8000204:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8000206:	200a      	movs	r0, #10
 8000208:	f001 f84a 	bl	80012a0 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 800020c:	f107 020c 	add.w	r2, r7, #12
 8000210:	23ff      	movs	r3, #255	; 0xff
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2303      	movs	r3, #3
 8000216:	2170      	movs	r1, #112	; 0x70
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <dht20_reset+0x74>)
 800021a:	f001 fd03 	bl	8001c24 <HAL_I2C_Master_Transmit>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200000a8 	.word	0x200000a8

0800022c <dht20_start>:

void dht20_start(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af02      	add	r7, sp, #8
	//query the DHT20
	uint8_t status[1];
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) status, 1, 0xFF);
 8000232:	1d3a      	adds	r2, r7, #4
 8000234:	23ff      	movs	r3, #255	; 0xff
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	2171      	movs	r1, #113	; 0x71
 800023c:	481b      	ldr	r0, [pc, #108]	; (80002ac <dht20_start+0x80>)
 800023e:	f001 fdef 	bl	8001e20 <HAL_I2C_Master_Receive>

	if((status[0] & 0x18) != 0x18){
 8000242:	793b      	ldrb	r3, [r7, #4]
 8000244:	f003 0318 	and.w	r3, r3, #24
 8000248:	2b18      	cmp	r3, #24
 800024a:	d00d      	beq.n	8000268 <dht20_start+0x3c>
		dht20_reset(0x1B);
 800024c:	201b      	movs	r0, #27
 800024e:	f7ff ffb1 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1C);
 8000252:	201c      	movs	r0, #28
 8000254:	f7ff ffae 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1E);
 8000258:	201e      	movs	r0, #30
 800025a:	f7ff ffab 	bl	80001b4 <dht20_reset>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2102      	movs	r1, #2
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <dht20_start+0x84>)
 8000264:	f001 fb82 	bl	800196c <HAL_GPIO_WritePin>
	}

	if ((status[0] & 0x18) == 0x18){
 8000268:	793b      	ldrb	r3, [r7, #4]
 800026a:	f003 0318 	and.w	r3, r3, #24
 800026e:	2b18      	cmp	r3, #24
 8000270:	d104      	bne.n	800027c <dht20_start+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000272:	2201      	movs	r2, #1
 8000274:	2102      	movs	r1, #2
 8000276:	480e      	ldr	r0, [pc, #56]	; (80002b0 <dht20_start+0x84>)
 8000278:	f001 fb78 	bl	800196c <HAL_GPIO_WritePin>
	}

	uint8_t data[3] = {0xAC, 0x33, 0x00};
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <dht20_start+0x88>)
 800027e:	463b      	mov	r3, r7
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	4611      	mov	r1, r2
 8000284:	8019      	strh	r1, [r3, #0]
 8000286:	3302      	adds	r3, #2
 8000288:	0c12      	lsrs	r2, r2, #16
 800028a:	701a      	strb	r2, [r3, #0]

	//HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) trigger, 1, 0xFF);
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) data, 3, 0xFF);
 800028c:	463a      	mov	r2, r7
 800028e:	23ff      	movs	r3, #255	; 0xff
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2303      	movs	r3, #3
 8000294:	2170      	movs	r1, #112	; 0x70
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <dht20_start+0x80>)
 8000298:	f001 fcc4 	bl	8001c24 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 800029c:	2050      	movs	r0, #80	; 0x50
 800029e:	f000 ffff 	bl	80012a0 <HAL_Delay>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000a8 	.word	0x200000a8
 80002b0:	40010800 	.word	0x40010800
 80002b4:	08005010 	.word	0x08005010

080002b8 <dht20_read>:

void dht20_read(uint16_t* value){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	6078      	str	r0, [r7, #4]
	dht20_start();
 80002c0:	f7ff ffb4 	bl	800022c <dht20_start>
	uint8_t data[7];
	uint32_t Temper = 0, Humid = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) data, 7, 0xFF);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	23ff      	movs	r3, #255	; 0xff
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2307      	movs	r3, #7
 80002d6:	2171      	movs	r1, #113	; 0x71
 80002d8:	4824      	ldr	r0, [pc, #144]	; (800036c <dht20_read+0xb4>)
 80002da:	f001 fda1 	bl	8001e20 <HAL_I2C_Master_Receive>

	//Humid
	Humid = (Humid | data[1]) << 8;
 80002de:	7a7b      	ldrb	r3, [r7, #9]
 80002e0:	461a      	mov	r2, r3
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	613b      	str	r3, [r7, #16]
	Humid = (Humid | data[2]) << 8;
 80002ea:	7abb      	ldrb	r3, [r7, #10]
 80002ec:	461a      	mov	r2, r3
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	613b      	str	r3, [r7, #16]
	Humid = Humid | data[3];
 80002f6:	7afb      	ldrb	r3, [r7, #11]
 80002f8:	461a      	mov	r2, r3
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	613b      	str	r3, [r7, #16]
	Humid = Humid >> 4;
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	613b      	str	r3, [r7, #16]
    Humid = (Humid * 100 * 10 / 1024 / 1024);
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	0d1b      	lsrs	r3, r3, #20
 8000312:	613b      	str	r3, [r7, #16]
    value[0] = Humid;
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	b29a      	uxth	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	801a      	strh	r2, [r3, #0]

	//Temperature
    Temper = (Temper | data[3]) << 8;
 800031c:	7afb      	ldrb	r3, [r7, #11]
 800031e:	461a      	mov	r2, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4313      	orrs	r3, r2
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	617b      	str	r3, [r7, #20]
    Temper = (Temper | data[4]) << 8;
 8000328:	7b3b      	ldrb	r3, [r7, #12]
 800032a:	461a      	mov	r2, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	4313      	orrs	r3, r2
 8000330:	021b      	lsls	r3, r3, #8
 8000332:	617b      	str	r3, [r7, #20]
    Temper = Temper | data[5];
 8000334:	7b7b      	ldrb	r3, [r7, #13]
 8000336:	461a      	mov	r2, r3
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	4313      	orrs	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
    Temper = Temper & 0xfffff;
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000344:	617b      	str	r3, [r7, #20]
    Temper = Temper*200*10/1024/1024 - 500;
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	0d1b      	lsrs	r3, r3, #20
 8000352:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000356:	617b      	str	r3, [r7, #20]
	value[1] = Temper;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3302      	adds	r3, #2
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	b292      	uxth	r2, r2
 8000360:	801a      	strh	r2, [r3, #0]

}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000a8 	.word	0x200000a8

08000370 <init_reading>:

void init_reading(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	dht20_init();
 8000374:	f7ff fef2 	bl	800015c <dht20_init>
	dht20_read(value_x10);
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <init_reading+0x14>)
 800037a:	f7ff ff9d 	bl	80002b8 <dht20_read>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000078 	.word	0x20000078

08000388 <reading_fsm_run>:

void reading_fsm_run(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af02      	add	r7, sp, #8
	switch(status){
 800038e:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <reading_fsm_run+0xb0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d002      	beq.n	800039c <reading_fsm_run+0x14>
 8000396:	2b01      	cmp	r3, #1
 8000398:	d007      	beq.n	80003aa <reading_fsm_run+0x22>
				sprintf(humid,"Humid: %01d.%d %%   ",value_x10[0]/10,value_x10[0]%10);
				setTimer1(300);
			}
			break;
		default:
			break;
 800039a:	e048      	b.n	800042e <reading_fsm_run+0xa6>
			setTimer1(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f000 fb0d 	bl	80009bc <setTimer1>
			status = READ;
 80003a2:	4b25      	ldr	r3, [pc, #148]	; (8000438 <reading_fsm_run+0xb0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	601a      	str	r2, [r3, #0]
			break;
 80003a8:	e041      	b.n	800042e <reading_fsm_run+0xa6>
			if (timer1_flag == 1){
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <reading_fsm_run+0xb4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d13c      	bne.n	800042c <reading_fsm_run+0xa4>
				dht20_read(value_x10);
 80003b2:	4823      	ldr	r0, [pc, #140]	; (8000440 <reading_fsm_run+0xb8>)
 80003b4:	f7ff ff80 	bl	80002b8 <dht20_read>
				sprintf(temp, "Temp:  %d.%d %cC",value_x10[1]/10,value_x10[1]%10 ,0b11011111);
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <reading_fsm_run+0xb8>)
 80003ba:	885b      	ldrh	r3, [r3, #2]
 80003bc:	4a21      	ldr	r2, [pc, #132]	; (8000444 <reading_fsm_run+0xbc>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <reading_fsm_run+0xb8>)
 80003ca:	885a      	ldrh	r2, [r3, #2]
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <reading_fsm_run+0xbc>)
 80003ce:	fba3 1302 	umull	r1, r3, r3, r2
 80003d2:	08d9      	lsrs	r1, r3, #3
 80003d4:	460b      	mov	r3, r1
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	440b      	add	r3, r1
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	b29b      	uxth	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	23df      	movs	r3, #223	; 0xdf
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	4613      	mov	r3, r2
 80003e8:	4602      	mov	r2, r0
 80003ea:	4917      	ldr	r1, [pc, #92]	; (8000448 <reading_fsm_run+0xc0>)
 80003ec:	4817      	ldr	r0, [pc, #92]	; (800044c <reading_fsm_run+0xc4>)
 80003ee:	f004 f951 	bl	8004694 <siprintf>
				sprintf(humid,"Humid: %01d.%d %%   ",value_x10[0]/10,value_x10[0]%10);
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <reading_fsm_run+0xb8>)
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	4a13      	ldr	r2, [pc, #76]	; (8000444 <reading_fsm_run+0xbc>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b29b      	uxth	r3, r3
 8000400:	4618      	mov	r0, r3
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <reading_fsm_run+0xb8>)
 8000404:	881a      	ldrh	r2, [r3, #0]
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <reading_fsm_run+0xbc>)
 8000408:	fba3 1302 	umull	r1, r3, r3, r2
 800040c:	08d9      	lsrs	r1, r3, #3
 800040e:	460b      	mov	r3, r1
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	440b      	add	r3, r1
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	b29b      	uxth	r3, r3
 800041a:	4602      	mov	r2, r0
 800041c:	490c      	ldr	r1, [pc, #48]	; (8000450 <reading_fsm_run+0xc8>)
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <reading_fsm_run+0xcc>)
 8000420:	f004 f938 	bl	8004694 <siprintf>
				setTimer1(300);
 8000424:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000428:	f000 fac8 	bl	80009bc <setTimer1>
			break;
 800042c:	bf00      	nop
	}
	lcd_show_value();
 800042e:	f000 f8f1 	bl	8000614 <lcd_show_value>
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200000a4 	.word	0x200000a4
 800043c:	2000018c 	.word	0x2000018c
 8000440:	20000078 	.word	0x20000078
 8000444:	cccccccd 	.word	0xcccccccd
 8000448:	08005014 	.word	0x08005014
 800044c:	2000007c 	.word	0x2000007c
 8000450:	08005028 	.word	0x08005028
 8000454:	20000090 	.word	0x20000090

08000458 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x3F << 1)  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	f023 030f 	bic.w	r3, r3, #15
 8000468:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	f043 030c 	orr.w	r3, r3, #12
 8000476:	b2db      	uxtb	r3, r3
 8000478:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	f043 0308 	orr.w	r3, r3, #8
 8000480:	b2db      	uxtb	r3, r3
 8000482:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000484:	7bbb      	ldrb	r3, [r7, #14]
 8000486:	f043 030c 	orr.w	r3, r3, #12
 800048a:	b2db      	uxtb	r3, r3
 800048c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	b2db      	uxtb	r3, r3
 8000496:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000498:	f107 0208 	add.w	r2, r7, #8
 800049c:	2364      	movs	r3, #100	; 0x64
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2304      	movs	r3, #4
 80004a2:	217e      	movs	r1, #126	; 0x7e
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <lcd_send_cmd+0x5c>)
 80004a6:	f001 fbbd 	bl	8001c24 <HAL_I2C_Master_Transmit>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000a8 	.word	0x200000a8

080004b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af02      	add	r7, sp, #8
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f023 030f 	bic.w	r3, r3, #15
 80004c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	f043 030d 	orr.w	r3, r3, #13
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	f043 0309 	orr.w	r3, r3, #9
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	f043 030d 	orr.w	r3, r3, #13
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004ee:	7bbb      	ldrb	r3, [r7, #14]
 80004f0:	f043 0309 	orr.w	r3, r3, #9
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004f8:	f107 0208 	add.w	r2, r7, #8
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2304      	movs	r3, #4
 8000502:	217e      	movs	r1, #126	; 0x7e
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <lcd_send_data+0x5c>)
 8000506:	f001 fb8d 	bl	8001c24 <HAL_I2C_Master_Transmit>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000a8 	.word	0x200000a8

08000518 <lcd_init>:

void lcd_init (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33);
 800051c:	2033      	movs	r0, #51	; 0x33
 800051e:	f7ff ff9b 	bl	8000458 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000522:	2032      	movs	r0, #50	; 0x32
 8000524:	f7ff ff98 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000528:	2032      	movs	r0, #50	; 0x32
 800052a:	f000 feb9 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function (4-bit mode) */
 800052e:	2028      	movs	r0, #40	; 0x28
 8000530:	f7ff ff92 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f000 feb3 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800053a:	2001      	movs	r0, #1
 800053c:	f7ff ff8c 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000540:	2032      	movs	r0, #50	; 0x32
 8000542:	f000 fead 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000546:	2006      	movs	r0, #6
 8000548:	f7ff ff86 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 800054c:	2032      	movs	r0, #50	; 0x32
 800054e:	f000 fea7 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000552:	200c      	movs	r0, #12
 8000554:	f7ff ff80 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000558:	2032      	movs	r0, #50	; 0x32
 800055a:	f000 fea1 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800055e:	2002      	movs	r0, #2
 8000560:	f7ff ff7a 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000564:	2032      	movs	r0, #50	; 0x32
 8000566:	f000 fe9b 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x80);
 800056a:	2080      	movs	r0, #128	; 0x80
 800056c:	f7ff ff74 	bl	8000458 <lcd_send_cmd>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800057c:	e006      	b.n	800058c <lcd_send_string+0x18>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff96 	bl	80004b8 <lcd_send_data>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f4      	bne.n	800057e <lcd_send_string+0xa>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff58 	bl	8000458 <lcd_send_cmd>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d104      	bne.n	80005c6 <lcd_goto_XY+0x1a>
	{
		pos_Addr = 0x80 + col;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	3b80      	subs	r3, #128	; 0x80
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	e003      	b.n	80005ce <lcd_goto_XY+0x22>
	}
	else
	{
		pos_Addr = 0xC0 + col;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	3b40      	subs	r3, #64	; 0x40
 80005cc:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff41 	bl	8000458 <lcd_send_cmd>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <lcd_greeting>:

void lcd_greeting (void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	  lcd_clear_display();
 80005e4:	f7ff ffdb 	bl	800059e <lcd_clear_display>
	  lcd_init();
 80005e8:	f7ff ff96 	bl	8000518 <lcd_init>
	  lcd_goto_XY(0, 0);
 80005ec:	2100      	movs	r1, #0
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff ffdc 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string("System Boot Done");
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <lcd_greeting+0x2c>)
 80005f6:	f7ff ffbd 	bl	8000574 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 80005fa:	2100      	movs	r1, #0
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ffd5 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string("Waiting...");
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <lcd_greeting+0x30>)
 8000604:	f7ff ffb6 	bl	8000574 <lcd_send_string>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08005040 	.word	0x08005040
 8000610:	08005054 	.word	0x08005054

08000614 <lcd_show_value>:

void lcd_show_value(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	  lcd_goto_XY(0, 0);
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc6 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string(humid);
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <lcd_show_value+0x24>)
 8000622:	f7ff ffa7 	bl	8000574 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ffbf 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string(temp);
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <lcd_show_value+0x28>)
 8000630:	f7ff ffa0 	bl	8000574 <lcd_send_string>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000090 	.word	0x20000090
 800063c:	2000007c 	.word	0x2000007c

08000640 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <HAL_UART_RxCpltCallback+0x60>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d122      	bne.n	8000698 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
 8000652:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000656:	2201      	movs	r2, #1
 8000658:	4912      	ldr	r1, [pc, #72]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 800065c:	f003 fafb 	bl	8003c56 <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 8000668:	7819      	ldrb	r1, [r3, #0]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_UART_RxCpltCallback+0x70>)
 800066c:	5499      	strb	r1, [r3, r2]
		index_buffer++;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 8000678:	701a      	strb	r2, [r3, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b32      	cmp	r3, #50	; 0x32
 8000680:	d102      	bne.n	8000688 <HAL_UART_RxCpltCallback+0x48>
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_UART_RxCpltCallback+0x74>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	4904      	ldr	r1, [pc, #16]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 8000694:	f003 fb71 	bl	8003d7a <HAL_UART_Receive_IT>
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	200001dc 	.word	0x200001dc
 80006a8:	20000144 	.word	0x20000144
 80006ac:	20000212 	.word	0x20000212
 80006b0:	200001e0 	.word	0x200001e0
 80006b4:	20000213 	.word	0x20000213

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fd8e 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f838 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f920 	bl	8000908 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c8:	f000 f87a 	bl	80007c0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 f8f2 	bl	80008b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006d0:	f000 f8a4 	bl	800081c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <main+0x68>)
 80006d6:	f002 fec7 	bl	8003468 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	4911      	ldr	r1, [pc, #68]	; (8000724 <main+0x6c>)
 80006de:	4812      	ldr	r0, [pc, #72]	; (8000728 <main+0x70>)
 80006e0:	f003 fb4b 	bl	8003d7a <HAL_UART_Receive_IT>
  Scan_Addr(); //Scan the address of I2C device
 80006e4:	f000 fcf2 	bl	80010cc <Scan_Addr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_greeting();
 80006e8:	f7ff ff7a 	bl	80005e0 <lcd_greeting>
  init_reading();
 80006ec:	f7ff fe40 	bl	8000370 <init_reading>
  setTimer3(300);
 80006f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006f4:	f000 f98a 	bl	8000a0c <setTimer3>
  while (1)
  {
	  if (buffer_flag == 1){
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <main+0x74>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d104      	bne.n	800070a <main+0x52>
		  cmd_parser_fsm();
 8000700:	f000 fc14 	bl	8000f2c <cmd_parser_fsm>
		  buffer_flag = 0;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <main+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
	  }
	  if(timer3_flag == 1){
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <main+0x78>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d1f2      	bne.n	80006f8 <main+0x40>
		  setTimer3(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f97a 	bl	8000a0c <setTimer3>
		  uart_control_fsm();
 8000718:	f000 fc70 	bl	8000ffc <uart_control_fsm>
	  if (buffer_flag == 1){
 800071c:	e7ec      	b.n	80006f8 <main+0x40>
 800071e:	bf00      	nop
 8000720:	200000fc 	.word	0x200000fc
 8000724:	200001dc 	.word	0x200001dc
 8000728:	20000144 	.word	0x20000144
 800072c:	20000213 	.word	0x20000213
 8000730:	2000019c 	.word	0x2000019c

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	; 0x40
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0318 	add.w	r3, r7, #24
 800073e:	2228      	movs	r2, #40	; 0x28
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 ffc6 	bl	80046d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000772:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0318 	add.w	r3, r7, #24
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fa09 	bl	8002b94 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000788:	f000 f912 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2102      	movs	r1, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fc76 	bl	8003098 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007b2:	f000 f8fd 	bl	80009b0 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3740      	adds	r7, #64	; 0x40
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	; (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f001 f8cd 	bl	800199c <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f8d2 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000a8 	.word	0x200000a8
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM2_Init+0x94>)
 800083a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000842:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM2_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000850:	2263      	movs	r2, #99	; 0x63
 8000852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_TIM2_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000862:	f002 fdb1 	bl	80033c8 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800086c:	f000 f8a0 	bl	80009b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_TIM2_Init+0x94>)
 800087e:	f002 ff4d 	bl	800371c <HAL_TIM_ConfigClockSource>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 f892 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM2_Init+0x94>)
 800089a:	f003 f91f 	bl	8003adc <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a4:	f000 f884 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000fc 	.word	0x200000fc

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f003 f966 	bl	8003bbc <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f85b 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000144 	.word	0x20000144
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_GPIO_Init+0x8c>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000922:	f043 0320 	orr.w	r3, r3, #32
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_GPIO_Init+0x8c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0320 	and.w	r3, r3, #32
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <MX_GPIO_Init+0x8c>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_GPIO_Init+0x8c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <MX_GPIO_Init+0x8c>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_GPIO_Init+0x8c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2102      	movs	r1, #2
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <MX_GPIO_Init+0x90>)
 800096a:	f000 ffff 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800096e:	2302      	movs	r3, #2
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0x90>)
 8000986:	f000 fe6d 	bl	8001664 <HAL_GPIO_Init>

}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	timerRun();
 80009a4:	f000 f85a 	bl	8000a5c <timerRun>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <setTimer1+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <setTimer1+0x24>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000188 	.word	0x20000188
 80009e0:	2000018c 	.word	0x2000018c

080009e4 <setTimer2>:

void setTimer2(int duration){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <setTimer2+0x20>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <setTimer2+0x24>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000190 	.word	0x20000190
 8000a08:	20000194 	.word	0x20000194

08000a0c <setTimer3>:

void setTimer3(int duration){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <setTimer3+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <setTimer3+0x24>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000198 	.word	0x20000198
 8000a30:	2000019c 	.word	0x2000019c

08000a34 <setTimer4>:

void setTimer4(int duration){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <setTimer4+0x20>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <setTimer4+0x24>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	200001a0 	.word	0x200001a0
 8000a58:	200001a4 	.word	0x200001a4

08000a5c <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000a60:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <timerRun+0x14c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dd0b      	ble.n	8000a80 <timerRun+0x24>
		timer1_counter--;
 8000a68:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <timerRun+0x14c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <timerRun+0x14c>)
 8000a70:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <timerRun+0x14c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <timerRun+0x24>
			timer1_flag = 1;
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	; (8000bac <timerRun+0x150>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <timerRun+0x154>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dd0b      	ble.n	8000aa0 <timerRun+0x44>
		timer2_counter--;
 8000a88:	4b49      	ldr	r3, [pc, #292]	; (8000bb0 <timerRun+0x154>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	4a48      	ldr	r2, [pc, #288]	; (8000bb0 <timerRun+0x154>)
 8000a90:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <timerRun+0x154>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <timerRun+0x44>
			timer2_flag = 1;
 8000a9a:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <timerRun+0x158>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000aa0:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <timerRun+0x15c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dd0b      	ble.n	8000ac0 <timerRun+0x64>
		timer3_counter--;
 8000aa8:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <timerRun+0x15c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	4a42      	ldr	r2, [pc, #264]	; (8000bb8 <timerRun+0x15c>)
 8000ab0:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000ab2:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <timerRun+0x15c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <timerRun+0x64>
			timer3_flag = 1;
 8000aba:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <timerRun+0x160>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <timerRun+0x164>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd0b      	ble.n	8000ae0 <timerRun+0x84>
		timer4_counter--;
 8000ac8:	4b3d      	ldr	r3, [pc, #244]	; (8000bc0 <timerRun+0x164>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	4a3c      	ldr	r2, [pc, #240]	; (8000bc0 <timerRun+0x164>)
 8000ad0:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <timerRun+0x164>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <timerRun+0x84>
			timer4_flag = 1;
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <timerRun+0x168>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <timerRun+0x16c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd0b      	ble.n	8000b00 <timerRun+0xa4>
		timer5_counter--;
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <timerRun+0x16c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <timerRun+0x16c>)
 8000af0:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <timerRun+0x16c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <timerRun+0xa4>
			timer5_flag = 1;
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <timerRun+0x170>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8000b00:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <timerRun+0x174>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dd0b      	ble.n	8000b20 <timerRun+0xc4>
		timer6_counter--;
 8000b08:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <timerRun+0x174>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4a30      	ldr	r2, [pc, #192]	; (8000bd0 <timerRun+0x174>)
 8000b10:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8000b12:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <timerRun+0x174>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <timerRun+0xc4>
			timer6_flag = 1;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <timerRun+0x178>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <timerRun+0x17c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	dd0b      	ble.n	8000b40 <timerRun+0xe4>
		timer7_counter--;
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <timerRun+0x17c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <timerRun+0x17c>)
 8000b30:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <timerRun+0x17c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <timerRun+0xe4>
			timer7_flag = 1;
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <timerRun+0x180>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <timerRun+0x184>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dd0b      	ble.n	8000b60 <timerRun+0x104>
		timer8_counter--;
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <timerRun+0x184>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <timerRun+0x184>)
 8000b50:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <timerRun+0x184>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <timerRun+0x104>
			timer8_flag = 1;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <timerRun+0x188>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <timerRun+0x18c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	dd0b      	ble.n	8000b80 <timerRun+0x124>
		timer9_counter--;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <timerRun+0x18c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <timerRun+0x18c>)
 8000b70:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <timerRun+0x18c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <timerRun+0x124>
			timer9_flag = 1;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <timerRun+0x190>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <timerRun+0x194>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dd0b      	ble.n	8000ba0 <timerRun+0x144>
		timer10_counter--;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <timerRun+0x194>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <timerRun+0x194>)
 8000b90:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <timerRun+0x194>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <timerRun+0x144>
			timer10_flag = 1;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <timerRun+0x198>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000188 	.word	0x20000188
 8000bac:	2000018c 	.word	0x2000018c
 8000bb0:	20000190 	.word	0x20000190
 8000bb4:	20000194 	.word	0x20000194
 8000bb8:	20000198 	.word	0x20000198
 8000bbc:	2000019c 	.word	0x2000019c
 8000bc0:	200001a0 	.word	0x200001a0
 8000bc4:	200001a4 	.word	0x200001a4
 8000bc8:	200001a8 	.word	0x200001a8
 8000bcc:	200001ac 	.word	0x200001ac
 8000bd0:	200001b0 	.word	0x200001b0
 8000bd4:	200001b4 	.word	0x200001b4
 8000bd8:	200001b8 	.word	0x200001b8
 8000bdc:	200001bc 	.word	0x200001bc
 8000be0:	200001c0 	.word	0x200001c0
 8000be4:	200001c4 	.word	0x200001c4
 8000be8:	200001c8 	.word	0x200001c8
 8000bec:	200001cc 	.word	0x200001cc
 8000bf0:	200001d0 	.word	0x200001d0
 8000bf4:	200001d4 	.word	0x200001d4

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <HAL_I2C_MspInit+0x90>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d132      	bne.n	8000ce2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_I2C_MspInit+0x94>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <HAL_I2C_MspInit+0x94>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_I2C_MspInit+0x94>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <HAL_I2C_MspInit+0x98>)
 8000caa:	f000 fcdb 	bl	8001664 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_I2C_MspInit+0x9c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <HAL_I2C_MspInit+0x9c>)
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_I2C_MspInit+0x94>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_I2C_MspInit+0x94>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_I2C_MspInit+0x94>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010c00 	.word	0x40010c00
 8000cf8:	40010000 	.word	0x40010000

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d0c:	d113      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_TIM_Base_MspInit+0x44>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	201c      	movs	r0, #28
 8000d2c:	f000 fbb3 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d30:	201c      	movs	r0, #28
 8000d32:	f000 fbcc 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_UART_MspInit+0x98>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d137      	bne.n	8000dd4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6e:	61d3      	str	r3, [r2, #28]
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x9c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d94:	2304      	movs	r3, #4
 8000d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_UART_MspInit+0xa0>)
 8000da8:	f000 fc5c 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dac:	2308      	movs	r3, #8
 8000dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_UART_MspInit+0xa0>)
 8000dc0:	f000 fc50 	bl	8001664 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2026      	movs	r0, #38	; 0x26
 8000dca:	f000 fb64 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dce:	2026      	movs	r0, #38	; 0x26
 8000dd0:	f000 fb7d 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 fa1b 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM2_IRQHandler+0x10>)
 8000e3e:	f002 fb65 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000fc 	.word	0x200000fc

08000e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART2_IRQHandler+0x10>)
 8000e52:	f002 ffc3 	bl	8003ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000144 	.word	0x20000144

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f003 fc28 	bl	80046e4 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20005000 	.word	0x20005000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	200001d8 	.word	0x200001d8
 8000ec8:	20000370 	.word	0x20000370

08000ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <isCmdEqualToRST>:
uint8_t cmdParserStatus = INIT_UART;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_index = 0;
uint8_t cmd_flag = INIT_UART;

int isCmdEqualToRST(uint8_t str[]){
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'R') flag = 1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b52      	cmp	r3, #82	; 0x52
 8000eea:	d102      	bne.n	8000ef2 <isCmdEqualToRST+0x1a>
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	e001      	b.n	8000ef6 <isCmdEqualToRST+0x1e>
	else flag = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
	return flag;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <isCmdEqualToCAP>:

int isCmdEqualToCAP(uint8_t str[]){
 8000f02:	b480      	push	{r7}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	int flag = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
	if (str[0] == 'C') flag = 1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b43      	cmp	r3, #67	; 0x43
 8000f14:	d102      	bne.n	8000f1c <isCmdEqualToCAP+0x1a>
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	e001      	b.n	8000f20 <isCmdEqualToCAP+0x1e>
	else flag = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
	return flag;
 8000f20:	68fb      	ldr	r3, [r7, #12]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <cmd_parser_fsm>:

void cmd_parser_fsm(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	switch(cmdParserStatus){
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <cmd_parser_fsm+0xbc>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d037      	beq.n	8000fa8 <cmd_parser_fsm+0x7c>
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	dc4c      	bgt.n	8000fd6 <cmd_parser_fsm+0xaa>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <cmd_parser_fsm+0x1a>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d008      	beq.n	8000f56 <cmd_parser_fsm+0x2a>
			else if (isCmdEqualToCAP(cmd_data)==1) cmd_flag = isCAP;
			else return;
			cmdParserStatus = INIT_UART;
			break;
		default:
			break;
 8000f44:	e047      	b.n	8000fd6 <cmd_parser_fsm+0xaa>
			if (buffer_byte == '!') cmdParserStatus = READING;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <cmd_parser_fsm+0xc0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b21      	cmp	r3, #33	; 0x21
 8000f4c:	d145      	bne.n	8000fda <cmd_parser_fsm+0xae>
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <cmd_parser_fsm+0xbc>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
			break;
 8000f54:	e041      	b.n	8000fda <cmd_parser_fsm+0xae>
			if (buffer_byte != '!' && buffer_byte != '#'){
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <cmd_parser_fsm+0xc0>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b21      	cmp	r3, #33	; 0x21
 8000f5c:	d011      	beq.n	8000f82 <cmd_parser_fsm+0x56>
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <cmd_parser_fsm+0xc0>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b23      	cmp	r3, #35	; 0x23
 8000f64:	d00d      	beq.n	8000f82 <cmd_parser_fsm+0x56>
				cmd_data[cmd_index] = buffer_byte;
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <cmd_parser_fsm+0xc4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <cmd_parser_fsm+0xc0>)
 8000f6e:	7819      	ldrb	r1, [r3, #0]
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <cmd_parser_fsm+0xc8>)
 8000f72:	5499      	strb	r1, [r3, r2]
				cmd_index++;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <cmd_parser_fsm+0xc4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <cmd_parser_fsm+0xc4>)
 8000f7e:	701a      	strb	r2, [r3, #0]
			break;
 8000f80:	e02d      	b.n	8000fde <cmd_parser_fsm+0xb2>
			else if (buffer_byte == '!'){
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <cmd_parser_fsm+0xc0>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b21      	cmp	r3, #33	; 0x21
 8000f88:	d103      	bne.n	8000f92 <cmd_parser_fsm+0x66>
				cmdParserStatus = READING;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <cmd_parser_fsm+0xbc>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
			break;
 8000f90:	e025      	b.n	8000fde <cmd_parser_fsm+0xb2>
			else if (buffer_byte == '#'){
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <cmd_parser_fsm+0xc0>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b23      	cmp	r3, #35	; 0x23
 8000f98:	d121      	bne.n	8000fde <cmd_parser_fsm+0xb2>
				cmdParserStatus = STOP;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <cmd_parser_fsm+0xbc>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <cmd_parser_fsm+0xc4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
			break;
 8000fa6:	e01a      	b.n	8000fde <cmd_parser_fsm+0xb2>
			if (isCmdEqualToRST(cmd_data)==1) cmd_flag = isRST;
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <cmd_parser_fsm+0xc8>)
 8000faa:	f7ff ff95 	bl	8000ed8 <isCmdEqualToRST>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d103      	bne.n	8000fbc <cmd_parser_fsm+0x90>
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <cmd_parser_fsm+0xcc>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e008      	b.n	8000fce <cmd_parser_fsm+0xa2>
			else if (isCmdEqualToCAP(cmd_data)==1) cmd_flag = isCAP;
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <cmd_parser_fsm+0xc8>)
 8000fbe:	f7ff ffa0 	bl	8000f02 <isCmdEqualToCAP>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10c      	bne.n	8000fe2 <cmd_parser_fsm+0xb6>
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <cmd_parser_fsm+0xcc>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	701a      	strb	r2, [r3, #0]
			cmdParserStatus = INIT_UART;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <cmd_parser_fsm+0xbc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
			break;
 8000fd4:	e006      	b.n	8000fe4 <cmd_parser_fsm+0xb8>
			break;
 8000fd6:	bf00      	nop
 8000fd8:	e004      	b.n	8000fe4 <cmd_parser_fsm+0xb8>
			break;
 8000fda:	bf00      	nop
 8000fdc:	e002      	b.n	8000fe4 <cmd_parser_fsm+0xb8>
			break;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <cmd_parser_fsm+0xb8>
			else return;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000214 	.word	0x20000214
 8000fec:	200001dc 	.word	0x200001dc
 8000ff0:	2000021b 	.word	0x2000021b
 8000ff4:	20000218 	.word	0x20000218
 8000ff8:	2000021c 	.word	0x2000021c

08000ffc <uart_control_fsm>:

void uart_control_fsm()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	switch (cmd_flag){
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <uart_control_fsm+0xc0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b0a      	cmp	r3, #10
 8001006:	d853      	bhi.n	80010b0 <uart_control_fsm+0xb4>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <uart_control_fsm+0x14>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	0800103d 	.word	0x0800103d
 8001014:	080010b1 	.word	0x080010b1
 8001018:	080010b1 	.word	0x080010b1
 800101c:	080010b1 	.word	0x080010b1
 8001020:	080010b1 	.word	0x080010b1
 8001024:	080010b1 	.word	0x080010b1
 8001028:	080010b1 	.word	0x080010b1
 800102c:	080010a9 	.word	0x080010a9
 8001030:	08001075 	.word	0x08001075
 8001034:	0800104b 	.word	0x0800104b
 8001038:	0800108f 	.word	0x0800108f
		case INIT_UART:
			cmd_flag = AUTO;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <uart_control_fsm+0xc0>)
 800103e:	2209      	movs	r2, #9
 8001040:	701a      	strb	r2, [r3, #0]
			setTimer2(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fcce 	bl	80009e4 <setTimer2>
			break;
 8001048:	e035      	b.n	80010b6 <uart_control_fsm+0xba>
		case AUTO:
			if (timer2_flag == 1){
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <uart_control_fsm+0xc4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d108      	bne.n	8001064 <uart_control_fsm+0x68>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2102      	movs	r1, #2
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <uart_control_fsm+0xc8>)
 8001058:	f000 fc88 	bl	800196c <HAL_GPIO_WritePin>
				setTimer2(300);
 800105c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001060:	f7ff fcc0 	bl	80009e4 <setTimer2>
			}
			reading_fsm_run();
 8001064:	f7ff f990 	bl	8000388 <reading_fsm_run>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2102      	movs	r1, #2
 800106c:	4815      	ldr	r0, [pc, #84]	; (80010c4 <uart_control_fsm+0xc8>)
 800106e:	f000 fc7d 	bl	800196c <HAL_GPIO_WritePin>
			break;
 8001072:	e020      	b.n	80010b6 <uart_control_fsm+0xba>
		case isCAP:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2102      	movs	r1, #2
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <uart_control_fsm+0xc8>)
 800107a:	f000 fc77 	bl	800196c <HAL_GPIO_WritePin>
			setTimer4(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f7ff fcd7 	bl	8000a34 <setTimer4>
			cmd_flag = WAIT;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <uart_control_fsm+0xc0>)
 8001088:	220a      	movs	r2, #10
 800108a:	701a      	strb	r2, [r3, #0]
			break;
 800108c:	e013      	b.n	80010b6 <uart_control_fsm+0xba>
		case WAIT:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <uart_control_fsm+0xc8>)
 8001094:	f000 fc6a 	bl	800196c <HAL_GPIO_WritePin>
			if (timer4_flag == 1) cmd_flag = INIT_UART;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <uart_control_fsm+0xcc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d109      	bne.n	80010b4 <uart_control_fsm+0xb8>
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <uart_control_fsm+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
			break;
 80010a6:	e005      	b.n	80010b4 <uart_control_fsm+0xb8>
		case isRST:
			cmd_flag = INIT_UART;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <uart_control_fsm+0xc0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
			break;
 80010ae:	e002      	b.n	80010b6 <uart_control_fsm+0xba>
		default:
			break;
 80010b0:	bf00      	nop
 80010b2:	e000      	b.n	80010b6 <uart_control_fsm+0xba>
			break;
 80010b4:	bf00      	nop
	}
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000021c 	.word	0x2000021c
 80010c0:	20000194 	.word	0x20000194
 80010c4:	40010800 	.word	0x40010800
 80010c8:	200001a4 	.word	0x200001a4

080010cc <Scan_Addr>:

void Scan_Addr() {
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b098      	sub	sp, #96	; 0x60
 80010d0:	af00      	add	r7, sp, #0
    char info[] = "\r\n\r\nScanning I2C bus...\r\n";
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <Scan_Addr+0xb0>)
 80010d4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80010d8:	461d      	mov	r5, r3
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e2:	c403      	stmia	r4!, {r0, r1}
 80010e4:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80010e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f82e 	bl	800014c <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	4820      	ldr	r0, [pc, #128]	; (8001180 <Scan_Addr+0xb4>)
 80010fe:	f002 fdaa 	bl	8003c56 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001108:	e02f      	b.n	800116a <Scan_Addr+0x9e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 800110a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	b299      	uxth	r1, r3
 8001112:	230a      	movs	r3, #10
 8001114:	2201      	movs	r2, #1
 8001116:	481b      	ldr	r0, [pc, #108]	; (8001184 <Scan_Addr+0xb8>)
 8001118:	f001 f8e2 	bl	80022e0 <HAL_I2C_IsDeviceReady>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 8001122:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001126:	2b00      	cmp	r3, #0
 8001128:	d113      	bne.n	8001152 <Scan_Addr+0x86>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 800112a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800112e:	4638      	mov	r0, r7
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <Scan_Addr+0xbc>)
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	f003 fa7a 	bl	800462c <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001138:	463b      	mov	r3, r7
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f806 	bl	800014c <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4639      	mov	r1, r7
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <Scan_Addr+0xb4>)
 800114c:	f002 fd83 	bl	8003c56 <HAL_UART_Transmit>
 8001150:	e006      	b.n	8001160 <Scan_Addr+0x94>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2201      	movs	r2, #1
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <Scan_Addr+0xc0>)
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <Scan_Addr+0xb4>)
 800115c:	f002 fd7b 	bl	8003c56 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8001160:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001164:	3301      	adds	r3, #1
 8001166:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800116a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800116e:	2b7f      	cmp	r3, #127	; 0x7f
 8001170:	d9cb      	bls.n	800110a <Scan_Addr+0x3e>
        }
    }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3760      	adds	r7, #96	; 0x60
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	0800506c 	.word	0x0800506c
 8001180:	20000144 	.word	0x20000144
 8001184:	200000a8 	.word	0x200000a8
 8001188:	08005060 	.word	0x08005060
 800118c:	08005068 	.word	0x08005068

08001190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	; (80011d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b6:	f7ff fe89 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f003 fa99 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011be:	f7ff fa7b 	bl	80006b8 <main>
  bx lr
 80011c2:	4770      	bx	lr
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011cc:	080050ec 	.word	0x080050ec
  ldr r2, =_sbss
 80011d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011d4:	2000036c 	.word	0x2000036c

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f947 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fcfe 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f95f 	bl	80014ea <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f927 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000008 	.word	0x20000008
 8001288:	20000220 	.word	0x20000220

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000220 	.word	0x20000220

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff fff0 	bl	800128c <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffe0 	bl	800128c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4906      	ldr	r1, [pc, #24]	; (8001380 <__NVIC_EnableIRQ+0x34>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff90 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff2d 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff42 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff35 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001514:	2b02      	cmp	r3, #2
 8001516:	d008      	beq.n	800152a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2204      	movs	r2, #4
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e020      	b.n	800156c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 020e 	bic.w	r2, r2, #14
 8001538:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800158a:	2b02      	cmp	r3, #2
 800158c:	d005      	beq.n	800159a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e051      	b.n	800163e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020e 	bic.w	r2, r2, #14
 80015a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a22      	ldr	r2, [pc, #136]	; (8001648 <HAL_DMA_Abort_IT+0xd0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d029      	beq.n	8001618 <HAL_DMA_Abort_IT+0xa0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a20      	ldr	r2, [pc, #128]	; (800164c <HAL_DMA_Abort_IT+0xd4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d022      	beq.n	8001614 <HAL_DMA_Abort_IT+0x9c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <HAL_DMA_Abort_IT+0xd8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d01a      	beq.n	800160e <HAL_DMA_Abort_IT+0x96>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_DMA_Abort_IT+0xdc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d012      	beq.n	8001608 <HAL_DMA_Abort_IT+0x90>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_DMA_Abort_IT+0xe0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00a      	beq.n	8001602 <HAL_DMA_Abort_IT+0x8a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <HAL_DMA_Abort_IT+0xe4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <HAL_DMA_Abort_IT+0x84>
 80015f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015fa:	e00e      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 80015fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001600:	e00b      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001606:	e008      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	e005      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 800160e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001612:	e002      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001614:	2310      	movs	r3, #16
 8001616:	e000      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001618:	2301      	movs	r3, #1
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_DMA_Abort_IT+0xe8>)
 800161c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
    } 
  }
  return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020008 	.word	0x40020008
 800164c:	4002001c 	.word	0x4002001c
 8001650:	40020030 	.word	0x40020030
 8001654:	40020044 	.word	0x40020044
 8001658:	40020058 	.word	0x40020058
 800165c:	4002006c 	.word	0x4002006c
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001676:	e169      	b.n	800194c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001678:	2201      	movs	r2, #1
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8158 	bne.w	8001946 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a9a      	ldr	r2, [pc, #616]	; (8001904 <HAL_GPIO_Init+0x2a0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d05e      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016a0:	4a98      	ldr	r2, [pc, #608]	; (8001904 <HAL_GPIO_Init+0x2a0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d875      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016a6:	4a98      	ldr	r2, [pc, #608]	; (8001908 <HAL_GPIO_Init+0x2a4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d058      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016ac:	4a96      	ldr	r2, [pc, #600]	; (8001908 <HAL_GPIO_Init+0x2a4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d86f      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016b2:	4a96      	ldr	r2, [pc, #600]	; (800190c <HAL_GPIO_Init+0x2a8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d052      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016b8:	4a94      	ldr	r2, [pc, #592]	; (800190c <HAL_GPIO_Init+0x2a8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d869      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016be:	4a94      	ldr	r2, [pc, #592]	; (8001910 <HAL_GPIO_Init+0x2ac>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d04c      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016c4:	4a92      	ldr	r2, [pc, #584]	; (8001910 <HAL_GPIO_Init+0x2ac>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d863      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016ca:	4a92      	ldr	r2, [pc, #584]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d046      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016d0:	4a90      	ldr	r2, [pc, #576]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d85d      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d82a      	bhi.n	8001730 <HAL_GPIO_Init+0xcc>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d859      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016de:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <HAL_GPIO_Init+0x80>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	08001739 	.word	0x08001739
 80016ec:	0800174b 	.word	0x0800174b
 80016f0:	0800178d 	.word	0x0800178d
 80016f4:	08001793 	.word	0x08001793
 80016f8:	08001793 	.word	0x08001793
 80016fc:	08001793 	.word	0x08001793
 8001700:	08001793 	.word	0x08001793
 8001704:	08001793 	.word	0x08001793
 8001708:	08001793 	.word	0x08001793
 800170c:	08001793 	.word	0x08001793
 8001710:	08001793 	.word	0x08001793
 8001714:	08001793 	.word	0x08001793
 8001718:	08001793 	.word	0x08001793
 800171c:	08001793 	.word	0x08001793
 8001720:	08001793 	.word	0x08001793
 8001724:	08001793 	.word	0x08001793
 8001728:	08001741 	.word	0x08001741
 800172c:	08001755 	.word	0x08001755
 8001730:	4a79      	ldr	r2, [pc, #484]	; (8001918 <HAL_GPIO_Init+0x2b4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e029      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e024      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01f      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e01a      	b.n	8001794 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e013      	b.n	8001794 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e009      	b.n	8001794 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e003      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x130>
          break;
 8001792:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d801      	bhi.n	800179e <HAL_GPIO_Init+0x13a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	e001      	b.n	80017a2 <HAL_GPIO_Init+0x13e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d802      	bhi.n	80017b0 <HAL_GPIO_Init+0x14c>
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x152>
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	3b08      	subs	r3, #8
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	210f      	movs	r1, #15
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	6a39      	ldr	r1, [r7, #32]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80b1 	beq.w	8001946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_GPIO_Init+0x2b8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a4c      	ldr	r2, [pc, #304]	; (800191c <HAL_GPIO_Init+0x2b8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_GPIO_Init+0x2b8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fc:	4a48      	ldr	r2, [pc, #288]	; (8001920 <HAL_GPIO_Init+0x2bc>)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a40      	ldr	r2, [pc, #256]	; (8001924 <HAL_GPIO_Init+0x2c0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x1ec>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_GPIO_Init+0x2c4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1e8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3e      	ldr	r2, [pc, #248]	; (800192c <HAL_GPIO_Init+0x2c8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <HAL_GPIO_Init+0x2cc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1e0>
 8001840:	2303      	movs	r3, #3
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001844:	2304      	movs	r3, #4
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001850:	2300      	movs	r3, #0
 8001852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001862:	492f      	ldr	r1, [pc, #188]	; (8001920 <HAL_GPIO_Init+0x2bc>)
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	492c      	ldr	r1, [pc, #176]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4928      	ldr	r1, [pc, #160]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4922      	ldr	r1, [pc, #136]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	491e      	ldr	r1, [pc, #120]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4918      	ldr	r1, [pc, #96]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4914      	ldr	r1, [pc, #80]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d021      	beq.n	8001938 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	490e      	ldr	r1, [pc, #56]	; (8001934 <HAL_GPIO_Init+0x2d0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e021      	b.n	8001946 <HAL_GPIO_Init+0x2e2>
 8001902:	bf00      	nop
 8001904:	10320000 	.word	0x10320000
 8001908:	10310000 	.word	0x10310000
 800190c:	10220000 	.word	0x10220000
 8001910:	10210000 	.word	0x10210000
 8001914:	10120000 	.word	0x10120000
 8001918:	10110000 	.word	0x10110000
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	40010800 	.word	0x40010800
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40011000 	.word	0x40011000
 8001930:	40011400 	.word	0x40011400
 8001934:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_GPIO_Init+0x304>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	43db      	mvns	r3, r3
 8001940:	4909      	ldr	r1, [pc, #36]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001942:	4013      	ands	r3, r2
 8001944:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	3301      	adds	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f ae8e 	bne.w	8001678 <HAL_GPIO_Init+0x14>
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	372c      	adds	r7, #44	; 0x2c
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	611a      	str	r2, [r3, #16]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e12b      	b.n	8001c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff f94a 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a00:	f001 fc9c 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8001a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a81      	ldr	r2, [pc, #516]	; (8001c10 <HAL_I2C_Init+0x274>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d807      	bhi.n	8001a20 <HAL_I2C_Init+0x84>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a80      	ldr	r2, [pc, #512]	; (8001c14 <HAL_I2C_Init+0x278>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	bf94      	ite	ls
 8001a18:	2301      	movls	r3, #1
 8001a1a:	2300      	movhi	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	e006      	b.n	8001a2e <HAL_I2C_Init+0x92>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a7d      	ldr	r2, [pc, #500]	; (8001c18 <HAL_I2C_Init+0x27c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	bf94      	ite	ls
 8001a28:	2301      	movls	r3, #1
 8001a2a:	2300      	movhi	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0e7      	b.n	8001c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4a78      	ldr	r2, [pc, #480]	; (8001c1c <HAL_I2C_Init+0x280>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0c9b      	lsrs	r3, r3, #18
 8001a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_I2C_Init+0x274>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d802      	bhi.n	8001a70 <HAL_I2C_Init+0xd4>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	e009      	b.n	8001a84 <HAL_I2C_Init+0xe8>
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	4a69      	ldr	r2, [pc, #420]	; (8001c20 <HAL_I2C_Init+0x284>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	3301      	adds	r3, #1
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	495c      	ldr	r1, [pc, #368]	; (8001c10 <HAL_I2C_Init+0x274>)
 8001aa0:	428b      	cmp	r3, r1
 8001aa2:	d819      	bhi.n	8001ad8 <HAL_I2C_Init+0x13c>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e59      	subs	r1, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab2:	1c59      	adds	r1, r3, #1
 8001ab4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ab8:	400b      	ands	r3, r1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <HAL_I2C_Init+0x138>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e59      	subs	r1, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad2:	e051      	b.n	8001b78 <HAL_I2C_Init+0x1dc>
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e04f      	b.n	8001b78 <HAL_I2C_Init+0x1dc>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d111      	bne.n	8001b04 <HAL_I2C_Init+0x168>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e58      	subs	r0, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	440b      	add	r3, r1
 8001aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e012      	b.n	8001b2a <HAL_I2C_Init+0x18e>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e58      	subs	r0, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	0099      	lsls	r1, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Init+0x196>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e022      	b.n	8001b78 <HAL_I2C_Init+0x1dc>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10e      	bne.n	8001b58 <HAL_I2C_Init+0x1bc>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e58      	subs	r0, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	440b      	add	r3, r1
 8001b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b56:	e00f      	b.n	8001b78 <HAL_I2C_Init+0x1dc>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1e58      	subs	r0, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	0099      	lsls	r1, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	6809      	ldr	r1, [r1, #0]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6911      	ldr	r1, [r2, #16]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68d2      	ldr	r2, [r2, #12]
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	000186a0 	.word	0x000186a0
 8001c14:	001e847f 	.word	0x001e847f
 8001c18:	003d08ff 	.word	0x003d08ff
 8001c1c:	431bde83 	.word	0x431bde83
 8001c20:	10624dd3 	.word	0x10624dd3

08001c24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	817b      	strh	r3, [r7, #10]
 8001c34:	4613      	mov	r3, r2
 8001c36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fb28 	bl	800128c <HAL_GetTick>
 8001c3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	f040 80e0 	bne.w	8001e0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2319      	movs	r3, #25
 8001c52:	2201      	movs	r2, #1
 8001c54:	4970      	ldr	r1, [pc, #448]	; (8001e18 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 fdc0 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	e0d3      	b.n	8001e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_I2C_Master_Transmit+0x50>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0cc      	b.n	8001e0e <HAL_I2C_Master_Transmit+0x1ea>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d007      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2221      	movs	r2, #33	; 0x21
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cdc:	8979      	ldrh	r1, [r7, #10]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	6a3a      	ldr	r2, [r7, #32]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fc2a 	bl	800253c <I2C_MasterRequestWrite>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e08d      	b.n	8001e0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d08:	e066      	b.n	8001dd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fe3a 	bl	8002988 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00d      	beq.n	8001d36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d107      	bne.n	8001d32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06b      	b.n	8001e0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d11b      	bne.n	8001dac <HAL_I2C_Master_Transmit+0x188>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d017      	beq.n	8001dac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6a39      	ldr	r1, [r7, #32]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fe2a 	bl	8002a0a <I2C_WaitOnBTFFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d107      	bne.n	8001dd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e01a      	b.n	8001e0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d194      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	00100002 	.word	0x00100002
 8001e1c:	ffff0000 	.word	0xffff0000

08001e20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	817b      	strh	r3, [r7, #10]
 8001e30:	4613      	mov	r3, r2
 8001e32:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff fa28 	bl	800128c <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	f040 823f 	bne.w	80022ca <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2319      	movs	r3, #25
 8001e52:	2201      	movs	r2, #1
 8001e54:	497f      	ldr	r1, [pc, #508]	; (8002054 <HAL_I2C_Master_Receive+0x234>)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fcc0 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
 8001e64:	e232      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_I2C_Master_Receive+0x54>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e22b      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d007      	beq.n	8001e9a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ea8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2222      	movs	r2, #34	; 0x22
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	893a      	ldrh	r2, [r7, #8]
 8001eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <HAL_I2C_Master_Receive+0x238>)
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001edc:	8979      	ldrh	r1, [r7, #10]
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fbac 	bl	8002640 <I2C_MasterRequestRead>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1ec      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d113      	bne.n	8001f22 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e1c0      	b.n	80022a4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d11e      	bne.n	8001f68 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3a:	b672      	cpsid	i
}
 8001f3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f64:	b662      	cpsie	i
}
 8001f66:	e035      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d11e      	bne.n	8001fae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001faa:	b662      	cpsie	i
}
 8001fac:	e012      	b.n	8001fd4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fd4:	e166      	b.n	80022a4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	f200 811f 	bhi.w	800221e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d123      	bne.n	8002030 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fd4d 	bl	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e167      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800202e:	e139      	b.n	80022a4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	2b02      	cmp	r3, #2
 8002036:	d152      	bne.n	80020de <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	2200      	movs	r2, #0
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <HAL_I2C_Master_Receive+0x23c>)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fbca 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e13c      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
 8002052:	bf00      	nop
 8002054:	00100002 	.word	0x00100002
 8002058:	ffff0000 	.word	0xffff0000
 800205c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002060:	b672      	cpsid	i
}
 8002062:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020a6:	b662      	cpsie	i
}
 80020a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020dc:	e0e2      	b.n	80022a4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	2200      	movs	r2, #0
 80020e6:	497b      	ldr	r1, [pc, #492]	; (80022d4 <HAL_I2C_Master_Receive+0x4b4>)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fb77 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0e9      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002106:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800213e:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <HAL_I2C_Master_Receive+0x4b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_I2C_Master_Receive+0x4bc>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0a1a      	lsrs	r2, r3, #8
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00da      	lsls	r2, r3, #3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	3b01      	subs	r3, #1
 800215c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d118      	bne.n	8002196 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002186:	b662      	cpsie	i
}
 8002188:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e09a      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d1d9      	bne.n	8002158 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021e6:	b662      	cpsie	i
}
 80021e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800221c:	e042      	b.n	80022a4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fc32 	bl	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e04c      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d118      	bne.n	80022a4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f ae94 	bne.w	8001fd6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	00010004 	.word	0x00010004
 80022d8:	20000000 	.word	0x20000000
 80022dc:	14f8b589 	.word	0x14f8b589

080022e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7fe ffcc 	bl	800128c <HAL_GetTick>
 80022f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 8111 	bne.w	800252a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2319      	movs	r3, #25
 800230e:	2201      	movs	r2, #1
 8002310:	4988      	ldr	r1, [pc, #544]	; (8002534 <HAL_I2C_IsDeviceReady+0x254>)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fa62 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	e104      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2C_IsDeviceReady+0x50>
 800232c:	2302      	movs	r3, #2
 800232e:	e0fd      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d007      	beq.n	8002356 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2224      	movs	r2, #36	; 0x24
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a70      	ldr	r2, [pc, #448]	; (8002538 <HAL_I2C_IsDeviceReady+0x258>)
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002388:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2200      	movs	r2, #0
 8002392:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fa20 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00d      	beq.n	80023be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b0:	d103      	bne.n	80023ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0b6      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023ce:	f7fe ff5d 	bl	800128c <HAL_GetTick>
 80023d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002402:	e025      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002404:	f7fe ff42 	bl	800128c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d302      	bcc.n	800241a <HAL_I2C_IsDeviceReady+0x13a>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	22a0      	movs	r2, #160	; 0xa0
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b02      	cmp	r3, #2
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2ba0      	cmp	r3, #160	; 0xa0
 800245a:	d005      	beq.n	8002468 <HAL_I2C_IsDeviceReady+0x188>
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d102      	bne.n	8002468 <HAL_I2C_IsDeviceReady+0x188>
 8002462:	7dbb      	ldrb	r3, [r7, #22]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0cd      	beq.n	8002404 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d129      	bne.n	80024d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2319      	movs	r3, #25
 80024aa:	2201      	movs	r2, #1
 80024ac:	4921      	ldr	r1, [pc, #132]	; (8002534 <HAL_I2C_IsDeviceReady+0x254>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f994 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e036      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e02c      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2319      	movs	r3, #25
 80024f2:	2201      	movs	r2, #1
 80024f4:	490f      	ldr	r1, [pc, #60]	; (8002534 <HAL_I2C_IsDeviceReady+0x254>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f970 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e012      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	3301      	adds	r3, #1
 800250a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	f4ff af32 	bcc.w	800237a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	00100002 	.word	0x00100002
 8002538:	ffff0000 	.word	0xffff0000

0800253c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d006      	beq.n	8002566 <I2C_MasterRequestWrite+0x2a>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d003      	beq.n	8002566 <I2C_MasterRequestWrite+0x2a>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002564:	d108      	bne.n	8002578 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e00b      	b.n	8002590 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	2b12      	cmp	r3, #18
 800257e:	d107      	bne.n	8002590 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f91d 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b6:	d103      	bne.n	80025c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e035      	b.n	8002630 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025cc:	d108      	bne.n	80025e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e01b      	b.n	8002618 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025e0:	897b      	ldrh	r3, [r7, #10]
 80025e2:	11db      	asrs	r3, r3, #7
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 0306 	and.w	r3, r3, #6
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f063 030f 	orn	r3, r3, #15
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	490e      	ldr	r1, [pc, #56]	; (8002638 <I2C_MasterRequestWrite+0xfc>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f943 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e010      	b.n	8002630 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <I2C_MasterRequestWrite+0x100>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f933 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	00010008 	.word	0x00010008
 800263c:	00010002 	.word	0x00010002

08002640 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002664:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d006      	beq.n	800267a <I2C_MasterRequestRead+0x3a>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d003      	beq.n	800267a <I2C_MasterRequestRead+0x3a>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002678:	d108      	bne.n	800268c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e00b      	b.n	80026a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	2b11      	cmp	r3, #17
 8002692:	d107      	bne.n	80026a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f893 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	d103      	bne.n	80026d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e079      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e0:	d108      	bne.n	80026f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	e05f      	b.n	80027b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	11db      	asrs	r3, r3, #7
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0306 	and.w	r3, r3, #6
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f063 030f 	orn	r3, r3, #15
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4930      	ldr	r1, [pc, #192]	; (80027d4 <I2C_MasterRequestRead+0x194>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8b9 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e054      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4929      	ldr	r1, [pc, #164]	; (80027d8 <I2C_MasterRequestRead+0x198>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8a9 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e044      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002766:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f831 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	d103      	bne.n	8002798 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e017      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800279c:	897b      	ldrh	r3, [r7, #10]
 800279e:	11db      	asrs	r3, r3, #7
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0306 	and.w	r3, r3, #6
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f063 030e 	orn	r3, r3, #14
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <I2C_MasterRequestRead+0x198>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f865 	bl	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	00010008 	.word	0x00010008
 80027d8:	00010002 	.word	0x00010002

080027dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ec:	e025      	b.n	800283a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d021      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fd49 	bl	800128c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0220 	orr.w	r2, r3, #32
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e023      	b.n	8002882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10d      	bne.n	8002860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	e00c      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4013      	ands	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	429a      	cmp	r2, r3
 800287e:	d0b6      	beq.n	80027ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002898:	e051      	b.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	d123      	bne.n	80028f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e046      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d021      	beq.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe fcc7 	bl	800128c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e020      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10c      	bne.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e00b      	b.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	43da      	mvns	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d18d      	bne.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002994:	e02d      	b.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8ce 	bl	8002b38 <I2C_IsAcknowledgeFailed>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e02d      	b.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d021      	beq.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ae:	f7fe fc6d 	bl	800128c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e007      	b.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d1ca      	bne.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a16:	e02d      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f88d 	bl	8002b38 <I2C_IsAcknowledgeFailed>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e02d      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d021      	beq.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a30:	f7fe fc2c 	bl	800128c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d116      	bne.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d1ca      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a98:	e042      	b.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d119      	bne.n	8002adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0210 	mvn.w	r2, #16
 8002ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e029      	b.n	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002adc:	f7fe fbd6 	bl	800128c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d302      	bcc.n	8002af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0220 	orr.w	r2, r3, #32
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e007      	b.n	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d1b5      	bne.n	8002a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d11b      	bne.n	8002b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e272      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8087 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bc0:	4b8f      	ldr	r3, [pc, #572]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d112      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5e>
 8002bcc:	4b8c      	ldr	r3, [pc, #560]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bda:	4b89      	ldr	r3, [pc, #548]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x12c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d168      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e24c      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x76>
 8002bfc:	4b80      	ldr	r3, [pc, #512]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7f      	ldr	r2, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	e02e      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a77      	ldr	r2, [pc, #476]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e01d      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0xbc>
 8002c36:	4b72      	ldr	r3, [pc, #456]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0xd4>
 8002c50:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe fb0c 	bl	800128c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fb08 	bl	800128c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e200      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe4>
 8002c96:	e014      	b.n	8002cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe faf8 	bl	800128c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe faf4 	bl	800128c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1ec      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb2:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x10c>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d063      	beq.n	8002d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cce:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cda:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d11c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x18c>
 8002ce6:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e1c0      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4939      	ldr	r1, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1e:	e03a      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d28:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe faad 	bl	800128c <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe faa9 	bl	800128c <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1a1      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4927      	ldr	r1, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	e015      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fa8c 	bl	800128c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe fa88 	bl	800128c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e180      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03a      	beq.n	8002e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7fe fa6c 	bl	800128c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fa68 	bl	800128c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e160      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f000 fad8 	bl	800338c <RCC_Delay>
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de4:	f7fe fa52 	bl	800128c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dea:	e00f      	b.n	8002e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dec:	f7fe fa4e 	bl	800128c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e146      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	42420000 	.word	0x42420000
 8002e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e9      	bne.n	8002dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 80a6 	beq.w	8002f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a87      	ldr	r2, [pc, #540]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b7f      	ldr	r3, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7e      	ldr	r2, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fa0f 	bl	800128c <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe fa0b 	bl	800128c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	; 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e103      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b75      	ldr	r3, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x4c8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x312>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	e02d      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eae:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a69      	ldr	r2, [pc, #420]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6213      	str	r3, [r2, #32]
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a66      	ldr	r2, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	e01c      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d10c      	bne.n	8002eea <HAL_RCC_OscConfig+0x356>
 8002ed0:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCC_OscConfig+0x36e>
 8002eea:	4b5b      	ldr	r3, [pc, #364]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a5a      	ldr	r2, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a57      	ldr	r2, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f9bf 	bl	800128c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe f9bb 	bl	800128c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0b1      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCC_OscConfig+0x37e>
 8002f34:	e014      	b.n	8002f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe f9a9 	bl	800128c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe f9a5 	bl	800128c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e09b      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ee      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a3b      	ldr	r2, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8087 	beq.w	800308a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d061      	beq.n	800304c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d146      	bne.n	800301e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe f979 	bl	800128c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe f975 	bl	800128c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e06d      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4921      	ldr	r1, [pc, #132]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a19      	ldr	r1, [r3, #32]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f949 	bl	800128c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe f945 	bl	800128c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e03d      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x46a>
 800301c:	e035      	b.n	800308a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_OscConfig+0x4cc>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe f932 	bl	800128c <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe f92e 	bl	800128c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e026      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x498>
 800304a:	e01e      	b.n	800308a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e019      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x500>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	429a      	cmp	r2, r3
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000

08003098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d0      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0207 	bic.w	r2, r3, #7
 80030c2:	4965      	ldr	r1, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d040      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e073      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4936      	ldr	r1, [pc, #216]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003188:	f7fe f880 	bl	800128c <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fe f87c 	bl	800128c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e053      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d210      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4922      	ldr	r1, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd ffde 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40022000 	.word	0x40022000
 800325c:	40021000 	.word	0x40021000
 8003260:	08005098 	.word	0x08005098
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b490      	push	{r4, r7}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <HAL_RCC_GetSysClockFreq+0xac>)
 8003274:	1d3c      	adds	r4, r7, #4
 8003276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800327c:	f240 2301 	movw	r3, #513	; 0x201
 8003280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x46>
 80032aa:	e02b      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ae:	623b      	str	r3, [r7, #32]
      break;
 80032b0:	e02b      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	0c9b      	lsrs	r3, r3, #18
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3328      	adds	r3, #40	; 0x28
 80032bc:	443b      	add	r3, r7
 80032be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_GetSysClockFreq+0xb0>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0c5b      	lsrs	r3, r3, #17
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	3328      	adds	r3, #40	; 0x28
 80032da:	443b      	add	r3, r7
 80032dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e6:	fb03 f202 	mul.w	r2, r3, r2
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e004      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	623b      	str	r3, [r7, #32]
      break;
 8003302:	e002      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003306:	623b      	str	r3, [r7, #32]
      break;
 8003308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800330a:	6a3b      	ldr	r3, [r7, #32]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3728      	adds	r7, #40	; 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bc90      	pop	{r4, r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	08005088 	.word	0x08005088
 800331c:	40021000 	.word	0x40021000
 8003320:	007a1200 	.word	0x007a1200
 8003324:	003d0900 	.word	0x003d0900

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <HAL_RCC_GetHCLKFreq+0x10>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003340:	f7ff fff2 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	080050a8 	.word	0x080050a8

08003364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003368:	f7ff ffde 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	080050a8 	.word	0x080050a8

0800338c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <RCC_Delay+0x34>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <RCC_Delay+0x38>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	0a5b      	lsrs	r3, r3, #9
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a8:	bf00      	nop
  }
  while (Delay --);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	60fa      	str	r2, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <RCC_Delay+0x1c>
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000000 	.word	0x20000000
 80033c4:	10624dd3 	.word	0x10624dd3

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fc84 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fa70 	bl	80038ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03a      	b.n	80034f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_TIM_Base_Start_IT+0x98>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d009      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_TIM_Base_Start_IT+0x9c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x58>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <HAL_TIM_Base_Start_IT+0xa0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d010      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e2:	e007      	b.n	80034f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	40012c00 	.word	0x40012c00
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800

0800350c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0202 	mvn.w	r2, #2
 8003538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9b1 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9a4 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f9b3 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0204 	mvn.w	r2, #4
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f987 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f97a 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f989 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d122      	bne.n	8003610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d11b      	bne.n	8003610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0208 	mvn.w	r2, #8
 80035e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2204      	movs	r2, #4
 80035e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f95d 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80035fc:	e005      	b.n	800360a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f950 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f95f 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b10      	cmp	r3, #16
 800361c:	d122      	bne.n	8003664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b10      	cmp	r3, #16
 800362a:	d11b      	bne.n	8003664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0210 	mvn.w	r2, #16
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2208      	movs	r2, #8
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f933 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f926 	bl	80038a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f935 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10e      	bne.n	8003690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0201 	mvn.w	r2, #1
 8003688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd f986 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b80      	cmp	r3, #128	; 0x80
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa77 	bl	8003baa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8f9 	bl	80038da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0220 	mvn.w	r2, #32
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa42 	bl	8003b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIM_ConfigClockSource+0x18>
 8003730:	2302      	movs	r3, #2
 8003732:	e0b3      	b.n	800389c <HAL_TIM_ConfigClockSource+0x180>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d03e      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0xd0>
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	f200 8087 	bhi.w	8003884 <HAL_TIM_ConfigClockSource+0x168>
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	f000 8085 	beq.w	8003888 <HAL_TIM_ConfigClockSource+0x16c>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d87f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 8003784:	2b70      	cmp	r3, #112	; 0x70
 8003786:	d01a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xa2>
 8003788:	2b70      	cmp	r3, #112	; 0x70
 800378a:	d87b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 800378c:	2b60      	cmp	r3, #96	; 0x60
 800378e:	d050      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x116>
 8003790:	2b60      	cmp	r3, #96	; 0x60
 8003792:	d877      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 8003794:	2b50      	cmp	r3, #80	; 0x50
 8003796:	d03c      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0xf6>
 8003798:	2b50      	cmp	r3, #80	; 0x50
 800379a:	d873      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d058      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x136>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d86f      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 80037a4:	2b30      	cmp	r3, #48	; 0x30
 80037a6:	d064      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x156>
 80037a8:	2b30      	cmp	r3, #48	; 0x30
 80037aa:	d86b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d060      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x156>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d867      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05c      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x156>
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d05a      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037bc:	e062      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f000 f966 	bl	8003a9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	609a      	str	r2, [r3, #8]
      break;
 80037ea:	e04e      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f000 f94f 	bl	8003a9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800380e:	609a      	str	r2, [r3, #8]
      break;
 8003810:	e03b      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	461a      	mov	r2, r3
 8003820:	f000 f8c6 	bl	80039b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2150      	movs	r1, #80	; 0x50
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f91d 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003830:	e02b      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	461a      	mov	r2, r3
 8003840:	f000 f8e4 	bl	8003a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2160      	movs	r1, #96	; 0x60
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f90d 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003850:	e01b      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 f8a6 	bl	80039b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f8fd 	bl	8003a6a <TIM_ITRx_SetConfig>
      break;
 8003870:	e00b      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f000 f8f4 	bl	8003a6a <TIM_ITRx_SetConfig>
        break;
 8003882:	e002      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003888:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0xbc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x30>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <TIM_Base_SetConfig+0xbc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <TIM_Base_SetConfig+0xc0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a07      	ldr	r2, [pc, #28]	; (80039a4 <TIM_Base_SetConfig+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800

080039b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 030a 	bic.w	r3, r3, #10
 80039ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 0210 	bic.w	r2, r3, #16
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	031b      	lsls	r3, r3, #12
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f043 0307 	orr.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	609a      	str	r2, [r3, #8]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b087      	sub	sp, #28
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	609a      	str	r2, [r3, #8]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e046      	b.n	8003b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d009      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d10c      	bne.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800

08003b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e03f      	b.n	8003c4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd f8ae 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fc85 	bl	8004510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	; 0x28
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d17c      	bne.n	8003d70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_UART_Transmit+0x2c>
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e075      	b.n	8003d72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_UART_Transmit+0x3e>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e06e      	b.n	8003d72 <HAL_UART_Transmit+0x11c>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2221      	movs	r2, #33	; 0x21
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003caa:	f7fd faef 	bl	800128c <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d108      	bne.n	8003cd8 <HAL_UART_Transmit+0x82>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	e003      	b.n	8003ce0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ce8:	e02a      	b.n	8003d40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fa38 	bl	800416a <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e036      	b.n	8003d72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10b      	bne.n	8003d22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e007      	b.n	8003d32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1cf      	bne.n	8003cea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fa08 	bl	800416a <UART_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e006      	b.n	8003d72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e000      	b.n	8003d72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d70:	2302      	movs	r3, #2
  }
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	4613      	mov	r3, r2
 8003d86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d11d      	bne.n	8003dd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_UART_Receive_IT+0x26>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e016      	b.n	8003dd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Receive_IT+0x38>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e00f      	b.n	8003dd2 <HAL_UART_Receive_IT+0x58>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fa19 	bl	80041fe <UART_Start_Receive_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10d      	bne.n	8003e2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_UART_IRQHandler+0x52>
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fac9 	bl	80043be <UART_Receive_IT>
      return;
 8003e2c:	e17b      	b.n	8004126 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80b1 	beq.w	8003f98 <HAL_UART_IRQHandler+0x1bc>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <HAL_UART_IRQHandler+0x70>
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80a6 	beq.w	8003f98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_UART_IRQHandler+0x90>
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_UART_IRQHandler+0xb0>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f043 0202 	orr.w	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_UART_IRQHandler+0xd0>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00f      	beq.n	8003ed6 <HAL_UART_IRQHandler+0xfa>
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_UART_IRQHandler+0xee>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0208 	orr.w	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 811e 	beq.w	800411c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_UART_IRQHandler+0x11e>
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa62 	bl	80043be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <HAL_UART_IRQHandler+0x146>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d031      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9a4 	bl	8004270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d023      	beq.n	8003f7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_UART_IRQHandler+0x350>)
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fb0c 	bl	8001578 <HAL_DMA_Abort_IT>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f70:	4610      	mov	r0, r2
 8003f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e00e      	b.n	8003f94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8e3 	bl	8004142 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	e00a      	b.n	8003f94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8df 	bl	8004142 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e006      	b.n	8003f94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8db 	bl	8004142 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f92:	e0c3      	b.n	800411c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	bf00      	nop
    return;
 8003f96:	e0c1      	b.n	800411c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 80a1 	bne.w	80040e4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 809b 	beq.w	80040e4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8095 	beq.w	80040e4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d04e      	beq.n	800407c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003fe8:	8a3b      	ldrh	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8098 	beq.w	8004120 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff4:	8a3a      	ldrh	r2, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f080 8092 	bcs.w	8004120 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8a3a      	ldrh	r2, [r7, #16]
 8004000:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b20      	cmp	r3, #32
 800400a:	d02b      	beq.n	8004064 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800401a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0210 	bic.w	r2, r2, #16
 8004058:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	4618      	mov	r0, r3
 8004060:	f7fd fa4f 	bl	8001502 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800406c:	b29b      	uxth	r3, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	b29b      	uxth	r3, r3
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f86d 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800407a:	e051      	b.n	8004120 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004084:	b29b      	uxth	r3, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d047      	beq.n	8004124 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004094:	8a7b      	ldrh	r3, [r7, #18]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d044      	beq.n	8004124 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040a8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0210 	bic.w	r2, r2, #16
 80040d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040d8:	8a7b      	ldrh	r3, [r7, #18]
 80040da:	4619      	mov	r1, r3
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f839 	bl	8004154 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040e2:	e01f      	b.n	8004124 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_UART_IRQHandler+0x324>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8f9 	bl	80042f0 <UART_Transmit_IT>
    return;
 80040fe:	e012      	b.n	8004126 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <HAL_UART_IRQHandler+0x34a>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f93a 	bl	800438e <UART_EndTransmit_IT>
    return;
 800411a:	e004      	b.n	8004126 <HAL_UART_IRQHandler+0x34a>
    return;
 800411c:	bf00      	nop
 800411e:	e002      	b.n	8004126 <HAL_UART_IRQHandler+0x34a>
      return;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_UART_IRQHandler+0x34a>
      return;
 8004124:	bf00      	nop
  }
}
 8004126:	3728      	adds	r7, #40	; 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	080042c9 	.word	0x080042c9

08004130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4613      	mov	r3, r2
 8004178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417a:	e02c      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d028      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <UART_WaitOnFlagUntilTimeout+0x30>
 800418a:	f7fd f87f 	bl	800128c <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	429a      	cmp	r2, r3
 8004198:	d21d      	bcs.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e00f      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0c3      	beq.n	800417c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2222      	movs	r2, #34	; 0x22
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0220 	orr.w	r2, r2, #32
 8004262:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004286:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0210 	bic.w	r2, r2, #16
 80042ae:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff ff2d 	bl	8004142 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b21      	cmp	r3, #33	; 0x21
 8004302:	d13e      	bne.n	8004382 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d114      	bne.n	8004338 <UART_Transmit_IT+0x48>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d110      	bne.n	8004338 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]
 8004336:	e008      	b.n	800434a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6211      	str	r1, [r2, #32]
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4619      	mov	r1, r3
 8004358:	84d1      	strh	r1, [r2, #38]	; 0x26
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff febe 	bl	8004130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b22      	cmp	r3, #34	; 0x22
 80043d0:	f040 8099 	bne.w	8004506 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d117      	bne.n	800440e <UART_Receive_IT+0x50>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d113      	bne.n	800440e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
 800440c:	e026      	b.n	800445c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d007      	beq.n	8004432 <UART_Receive_IT+0x74>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <UART_Receive_IT+0x82>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e008      	b.n	8004452 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800446c:	2b00      	cmp	r3, #0
 800446e:	d148      	bne.n	8004502 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0220 	bic.w	r2, r2, #32
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d123      	bne.n	80044f8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0210 	bic.w	r2, r2, #16
 80044c4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d10a      	bne.n	80044ea <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff fe2f 	bl	8004154 <HAL_UARTEx_RxEventCallback>
 80044f6:	e002      	b.n	80044fe <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fc f8a1 	bl	8000640 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e002      	b.n	8004508 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e000      	b.n	8004508 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800454a:	f023 030c 	bic.w	r3, r3, #12
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	430b      	orrs	r3, r1
 8004556:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <UART_SetConfig+0x114>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe fef4 	bl	8003364 <HAL_RCC_GetPCLK2Freq>
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	e002      	b.n	8004586 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004580:	f7fe fedc 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8004584:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	4a22      	ldr	r2, [pc, #136]	; (8004628 <UART_SetConfig+0x118>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	0119      	lsls	r1, r3, #4
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009a      	lsls	r2, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <UART_SetConfig+0x118>)
 80045be:	fba3 0302 	umull	r0, r3, r3, r2
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	2064      	movs	r0, #100	; 0x64
 80045c6:	fb00 f303 	mul.w	r3, r0, r3
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	3332      	adds	r3, #50	; 0x32
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <UART_SetConfig+0x118>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045dc:	4419      	add	r1, r3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <UART_SetConfig+0x118>)
 80045f6:	fba3 0302 	umull	r0, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2064      	movs	r0, #100	; 0x64
 80045fe:	fb00 f303 	mul.w	r3, r0, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	; 0x32
 8004608:	4a07      	ldr	r2, [pc, #28]	; (8004628 <UART_SetConfig+0x118>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	440a      	add	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40013800 	.word	0x40013800
 8004628:	51eb851f 	.word	0x51eb851f

0800462c <sniprintf>:
 800462c:	b40c      	push	{r2, r3}
 800462e:	b530      	push	{r4, r5, lr}
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <sniprintf+0x64>)
 8004632:	1e0c      	subs	r4, r1, #0
 8004634:	681d      	ldr	r5, [r3, #0]
 8004636:	b09d      	sub	sp, #116	; 0x74
 8004638:	da08      	bge.n	800464c <sniprintf+0x20>
 800463a:	238b      	movs	r3, #139	; 0x8b
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	b01d      	add	sp, #116	; 0x74
 8004644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004648:	b002      	add	sp, #8
 800464a:	4770      	bx	lr
 800464c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004650:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004654:	bf0c      	ite	eq
 8004656:	4623      	moveq	r3, r4
 8004658:	f104 33ff 	addne.w	r3, r4, #4294967295
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	9307      	str	r3, [sp, #28]
 8004660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004664:	9002      	str	r0, [sp, #8]
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	f8ad 3016 	strh.w	r3, [sp, #22]
 800466c:	4628      	mov	r0, r5
 800466e:	ab21      	add	r3, sp, #132	; 0x84
 8004670:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004672:	a902      	add	r1, sp, #8
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	f000 f9af 	bl	80049d8 <_svfiprintf_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	bfbc      	itt	lt
 800467e:	238b      	movlt	r3, #139	; 0x8b
 8004680:	602b      	strlt	r3, [r5, #0]
 8004682:	2c00      	cmp	r4, #0
 8004684:	d0dd      	beq.n	8004642 <sniprintf+0x16>
 8004686:	2200      	movs	r2, #0
 8004688:	9b02      	ldr	r3, [sp, #8]
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e7d9      	b.n	8004642 <sniprintf+0x16>
 800468e:	bf00      	nop
 8004690:	20000058 	.word	0x20000058

08004694 <siprintf>:
 8004694:	b40e      	push	{r1, r2, r3}
 8004696:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800469a:	b500      	push	{lr}
 800469c:	b09c      	sub	sp, #112	; 0x70
 800469e:	ab1d      	add	r3, sp, #116	; 0x74
 80046a0:	9002      	str	r0, [sp, #8]
 80046a2:	9006      	str	r0, [sp, #24]
 80046a4:	9107      	str	r1, [sp, #28]
 80046a6:	9104      	str	r1, [sp, #16]
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <siprintf+0x38>)
 80046aa:	4909      	ldr	r1, [pc, #36]	; (80046d0 <siprintf+0x3c>)
 80046ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b0:	9105      	str	r1, [sp, #20]
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	a902      	add	r1, sp, #8
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	f000 f98e 	bl	80049d8 <_svfiprintf_r>
 80046bc:	2200      	movs	r2, #0
 80046be:	9b02      	ldr	r3, [sp, #8]
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	b01c      	add	sp, #112	; 0x70
 80046c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c8:	b003      	add	sp, #12
 80046ca:	4770      	bx	lr
 80046cc:	20000058 	.word	0x20000058
 80046d0:	ffff0208 	.word	0xffff0208

080046d4 <memset>:
 80046d4:	4603      	mov	r3, r0
 80046d6:	4402      	add	r2, r0
 80046d8:	4293      	cmp	r3, r2
 80046da:	d100      	bne.n	80046de <memset+0xa>
 80046dc:	4770      	bx	lr
 80046de:	f803 1b01 	strb.w	r1, [r3], #1
 80046e2:	e7f9      	b.n	80046d8 <memset+0x4>

080046e4 <__errno>:
 80046e4:	4b01      	ldr	r3, [pc, #4]	; (80046ec <__errno+0x8>)
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000058 	.word	0x20000058

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	2600      	movs	r6, #0
 80046f4:	4d0c      	ldr	r5, [pc, #48]	; (8004728 <__libc_init_array+0x38>)
 80046f6:	4c0d      	ldr	r4, [pc, #52]	; (800472c <__libc_init_array+0x3c>)
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	f000 fc7a 	bl	8004ff8 <_init>
 8004704:	2600      	movs	r6, #0
 8004706:	4d0a      	ldr	r5, [pc, #40]	; (8004730 <__libc_init_array+0x40>)
 8004708:	4c0a      	ldr	r4, [pc, #40]	; (8004734 <__libc_init_array+0x44>)
 800470a:	1b64      	subs	r4, r4, r5
 800470c:	10a4      	asrs	r4, r4, #2
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	080050e4 	.word	0x080050e4
 800472c:	080050e4 	.word	0x080050e4
 8004730:	080050e4 	.word	0x080050e4
 8004734:	080050e8 	.word	0x080050e8

08004738 <__retarget_lock_acquire_recursive>:
 8004738:	4770      	bx	lr

0800473a <__retarget_lock_release_recursive>:
 800473a:	4770      	bx	lr

0800473c <_free_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4605      	mov	r5, r0
 8004740:	2900      	cmp	r1, #0
 8004742:	d040      	beq.n	80047c6 <_free_r+0x8a>
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f0c      	subs	r4, r1, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfb8      	it	lt
 800474e:	18e4      	addlt	r4, r4, r3
 8004750:	f000 f8dc 	bl	800490c <__malloc_lock>
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <_free_r+0x8c>)
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x2c>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	4628      	mov	r0, r5
 8004760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004764:	f000 b8d8 	b.w	8004918 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x42>
 800476c:	6820      	ldr	r0, [r4, #0]
 800476e:	1821      	adds	r1, r4, r0
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1809      	addeq	r1, r1, r0
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x1e>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x4c>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x42>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1850      	adds	r0, r2, r1
 800478c:	42a0      	cmp	r0, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x6c>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	4401      	add	r1, r0
 8004794:	1850      	adds	r0, r2, r1
 8004796:	4283      	cmp	r3, r0
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x22>
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4408      	add	r0, r1
 80047a2:	6010      	str	r0, [r2, #0]
 80047a4:	6053      	str	r3, [r2, #4]
 80047a6:	e7da      	b.n	800475e <_free_r+0x22>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x74>
 80047aa:	230c      	movs	r3, #12
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x22>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	1821      	adds	r1, r4, r0
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf01      	itttt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	1809      	addeq	r1, r1, r0
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	6063      	str	r3, [r4, #4]
 80047c2:	6054      	str	r4, [r2, #4]
 80047c4:	e7cb      	b.n	800475e <_free_r+0x22>
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	20000364 	.word	0x20000364

080047cc <sbrk_aligned>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	4e0e      	ldr	r6, [pc, #56]	; (8004808 <sbrk_aligned+0x3c>)
 80047d0:	460c      	mov	r4, r1
 80047d2:	6831      	ldr	r1, [r6, #0]
 80047d4:	4605      	mov	r5, r0
 80047d6:	b911      	cbnz	r1, 80047de <sbrk_aligned+0x12>
 80047d8:	f000 fbaa 	bl	8004f30 <_sbrk_r>
 80047dc:	6030      	str	r0, [r6, #0]
 80047de:	4621      	mov	r1, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	f000 fba5 	bl	8004f30 <_sbrk_r>
 80047e6:	1c43      	adds	r3, r0, #1
 80047e8:	d00a      	beq.n	8004800 <sbrk_aligned+0x34>
 80047ea:	1cc4      	adds	r4, r0, #3
 80047ec:	f024 0403 	bic.w	r4, r4, #3
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d007      	beq.n	8004804 <sbrk_aligned+0x38>
 80047f4:	1a21      	subs	r1, r4, r0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 fb9a 	bl	8004f30 <_sbrk_r>
 80047fc:	3001      	adds	r0, #1
 80047fe:	d101      	bne.n	8004804 <sbrk_aligned+0x38>
 8004800:	f04f 34ff 	mov.w	r4, #4294967295
 8004804:	4620      	mov	r0, r4
 8004806:	bd70      	pop	{r4, r5, r6, pc}
 8004808:	20000368 	.word	0x20000368

0800480c <_malloc_r>:
 800480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004810:	1ccd      	adds	r5, r1, #3
 8004812:	f025 0503 	bic.w	r5, r5, #3
 8004816:	3508      	adds	r5, #8
 8004818:	2d0c      	cmp	r5, #12
 800481a:	bf38      	it	cc
 800481c:	250c      	movcc	r5, #12
 800481e:	2d00      	cmp	r5, #0
 8004820:	4607      	mov	r7, r0
 8004822:	db01      	blt.n	8004828 <_malloc_r+0x1c>
 8004824:	42a9      	cmp	r1, r5
 8004826:	d905      	bls.n	8004834 <_malloc_r+0x28>
 8004828:	230c      	movs	r3, #12
 800482a:	2600      	movs	r6, #0
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4630      	mov	r0, r6
 8004830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004834:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004908 <_malloc_r+0xfc>
 8004838:	f000 f868 	bl	800490c <__malloc_lock>
 800483c:	f8d8 3000 	ldr.w	r3, [r8]
 8004840:	461c      	mov	r4, r3
 8004842:	bb5c      	cbnz	r4, 800489c <_malloc_r+0x90>
 8004844:	4629      	mov	r1, r5
 8004846:	4638      	mov	r0, r7
 8004848:	f7ff ffc0 	bl	80047cc <sbrk_aligned>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	4604      	mov	r4, r0
 8004850:	d155      	bne.n	80048fe <_malloc_r+0xf2>
 8004852:	f8d8 4000 	ldr.w	r4, [r8]
 8004856:	4626      	mov	r6, r4
 8004858:	2e00      	cmp	r6, #0
 800485a:	d145      	bne.n	80048e8 <_malloc_r+0xdc>
 800485c:	2c00      	cmp	r4, #0
 800485e:	d048      	beq.n	80048f2 <_malloc_r+0xe6>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	4631      	mov	r1, r6
 8004864:	4638      	mov	r0, r7
 8004866:	eb04 0903 	add.w	r9, r4, r3
 800486a:	f000 fb61 	bl	8004f30 <_sbrk_r>
 800486e:	4581      	cmp	r9, r0
 8004870:	d13f      	bne.n	80048f2 <_malloc_r+0xe6>
 8004872:	6821      	ldr	r1, [r4, #0]
 8004874:	4638      	mov	r0, r7
 8004876:	1a6d      	subs	r5, r5, r1
 8004878:	4629      	mov	r1, r5
 800487a:	f7ff ffa7 	bl	80047cc <sbrk_aligned>
 800487e:	3001      	adds	r0, #1
 8004880:	d037      	beq.n	80048f2 <_malloc_r+0xe6>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	442b      	add	r3, r5
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	f8d8 3000 	ldr.w	r3, [r8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d038      	beq.n	8004902 <_malloc_r+0xf6>
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	42a2      	cmp	r2, r4
 8004894:	d12b      	bne.n	80048ee <_malloc_r+0xe2>
 8004896:	2200      	movs	r2, #0
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	e00f      	b.n	80048bc <_malloc_r+0xb0>
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	1b52      	subs	r2, r2, r5
 80048a0:	d41f      	bmi.n	80048e2 <_malloc_r+0xd6>
 80048a2:	2a0b      	cmp	r2, #11
 80048a4:	d917      	bls.n	80048d6 <_malloc_r+0xca>
 80048a6:	1961      	adds	r1, r4, r5
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	6025      	str	r5, [r4, #0]
 80048ac:	bf18      	it	ne
 80048ae:	6059      	strne	r1, [r3, #4]
 80048b0:	6863      	ldr	r3, [r4, #4]
 80048b2:	bf08      	it	eq
 80048b4:	f8c8 1000 	streq.w	r1, [r8]
 80048b8:	5162      	str	r2, [r4, r5]
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	4638      	mov	r0, r7
 80048be:	f104 060b 	add.w	r6, r4, #11
 80048c2:	f000 f829 	bl	8004918 <__malloc_unlock>
 80048c6:	f026 0607 	bic.w	r6, r6, #7
 80048ca:	1d23      	adds	r3, r4, #4
 80048cc:	1af2      	subs	r2, r6, r3
 80048ce:	d0ae      	beq.n	800482e <_malloc_r+0x22>
 80048d0:	1b9b      	subs	r3, r3, r6
 80048d2:	50a3      	str	r3, [r4, r2]
 80048d4:	e7ab      	b.n	800482e <_malloc_r+0x22>
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	6862      	ldr	r2, [r4, #4]
 80048da:	d1dd      	bne.n	8004898 <_malloc_r+0x8c>
 80048dc:	f8c8 2000 	str.w	r2, [r8]
 80048e0:	e7ec      	b.n	80048bc <_malloc_r+0xb0>
 80048e2:	4623      	mov	r3, r4
 80048e4:	6864      	ldr	r4, [r4, #4]
 80048e6:	e7ac      	b.n	8004842 <_malloc_r+0x36>
 80048e8:	4634      	mov	r4, r6
 80048ea:	6876      	ldr	r6, [r6, #4]
 80048ec:	e7b4      	b.n	8004858 <_malloc_r+0x4c>
 80048ee:	4613      	mov	r3, r2
 80048f0:	e7cc      	b.n	800488c <_malloc_r+0x80>
 80048f2:	230c      	movs	r3, #12
 80048f4:	4638      	mov	r0, r7
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	f000 f80e 	bl	8004918 <__malloc_unlock>
 80048fc:	e797      	b.n	800482e <_malloc_r+0x22>
 80048fe:	6025      	str	r5, [r4, #0]
 8004900:	e7dc      	b.n	80048bc <_malloc_r+0xb0>
 8004902:	605b      	str	r3, [r3, #4]
 8004904:	deff      	udf	#255	; 0xff
 8004906:	bf00      	nop
 8004908:	20000364 	.word	0x20000364

0800490c <__malloc_lock>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__malloc_lock+0x8>)
 800490e:	f7ff bf13 	b.w	8004738 <__retarget_lock_acquire_recursive>
 8004912:	bf00      	nop
 8004914:	20000360 	.word	0x20000360

08004918 <__malloc_unlock>:
 8004918:	4801      	ldr	r0, [pc, #4]	; (8004920 <__malloc_unlock+0x8>)
 800491a:	f7ff bf0e 	b.w	800473a <__retarget_lock_release_recursive>
 800491e:	bf00      	nop
 8004920:	20000360 	.word	0x20000360

08004924 <__ssputs_r>:
 8004924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	461f      	mov	r7, r3
 800492a:	688e      	ldr	r6, [r1, #8]
 800492c:	4682      	mov	sl, r0
 800492e:	42be      	cmp	r6, r7
 8004930:	460c      	mov	r4, r1
 8004932:	4690      	mov	r8, r2
 8004934:	680b      	ldr	r3, [r1, #0]
 8004936:	d82c      	bhi.n	8004992 <__ssputs_r+0x6e>
 8004938:	898a      	ldrh	r2, [r1, #12]
 800493a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800493e:	d026      	beq.n	800498e <__ssputs_r+0x6a>
 8004940:	6965      	ldr	r5, [r4, #20]
 8004942:	6909      	ldr	r1, [r1, #16]
 8004944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004948:	eba3 0901 	sub.w	r9, r3, r1
 800494c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004950:	1c7b      	adds	r3, r7, #1
 8004952:	444b      	add	r3, r9
 8004954:	106d      	asrs	r5, r5, #1
 8004956:	429d      	cmp	r5, r3
 8004958:	bf38      	it	cc
 800495a:	461d      	movcc	r5, r3
 800495c:	0553      	lsls	r3, r2, #21
 800495e:	d527      	bpl.n	80049b0 <__ssputs_r+0x8c>
 8004960:	4629      	mov	r1, r5
 8004962:	f7ff ff53 	bl	800480c <_malloc_r>
 8004966:	4606      	mov	r6, r0
 8004968:	b360      	cbz	r0, 80049c4 <__ssputs_r+0xa0>
 800496a:	464a      	mov	r2, r9
 800496c:	6921      	ldr	r1, [r4, #16]
 800496e:	f000 fafd 	bl	8004f6c <memcpy>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	81a3      	strh	r3, [r4, #12]
 800497e:	6126      	str	r6, [r4, #16]
 8004980:	444e      	add	r6, r9
 8004982:	6026      	str	r6, [r4, #0]
 8004984:	463e      	mov	r6, r7
 8004986:	6165      	str	r5, [r4, #20]
 8004988:	eba5 0509 	sub.w	r5, r5, r9
 800498c:	60a5      	str	r5, [r4, #8]
 800498e:	42be      	cmp	r6, r7
 8004990:	d900      	bls.n	8004994 <__ssputs_r+0x70>
 8004992:	463e      	mov	r6, r7
 8004994:	4632      	mov	r2, r6
 8004996:	4641      	mov	r1, r8
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	f000 faaf 	bl	8004efc <memmove>
 800499e:	2000      	movs	r0, #0
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	1b9b      	subs	r3, r3, r6
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	4433      	add	r3, r6
 80049aa:	6023      	str	r3, [r4, #0]
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	462a      	mov	r2, r5
 80049b2:	f000 fae9 	bl	8004f88 <_realloc_r>
 80049b6:	4606      	mov	r6, r0
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d1e0      	bne.n	800497e <__ssputs_r+0x5a>
 80049bc:	4650      	mov	r0, sl
 80049be:	6921      	ldr	r1, [r4, #16]
 80049c0:	f7ff febc 	bl	800473c <_free_r>
 80049c4:	230c      	movs	r3, #12
 80049c6:	f8ca 3000 	str.w	r3, [sl]
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	e7e9      	b.n	80049ac <__ssputs_r+0x88>

080049d8 <_svfiprintf_r>:
 80049d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049dc:	4698      	mov	r8, r3
 80049de:	898b      	ldrh	r3, [r1, #12]
 80049e0:	4607      	mov	r7, r0
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	460d      	mov	r5, r1
 80049e6:	4614      	mov	r4, r2
 80049e8:	b09d      	sub	sp, #116	; 0x74
 80049ea:	d50e      	bpl.n	8004a0a <_svfiprintf_r+0x32>
 80049ec:	690b      	ldr	r3, [r1, #16]
 80049ee:	b963      	cbnz	r3, 8004a0a <_svfiprintf_r+0x32>
 80049f0:	2140      	movs	r1, #64	; 0x40
 80049f2:	f7ff ff0b 	bl	800480c <_malloc_r>
 80049f6:	6028      	str	r0, [r5, #0]
 80049f8:	6128      	str	r0, [r5, #16]
 80049fa:	b920      	cbnz	r0, 8004a06 <_svfiprintf_r+0x2e>
 80049fc:	230c      	movs	r3, #12
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e0d0      	b.n	8004ba8 <_svfiprintf_r+0x1d0>
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	616b      	str	r3, [r5, #20]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	2320      	movs	r3, #32
 8004a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a14:	2330      	movs	r3, #48	; 0x30
 8004a16:	f04f 0901 	mov.w	r9, #1
 8004a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a1e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004bc0 <_svfiprintf_r+0x1e8>
 8004a22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a26:	4623      	mov	r3, r4
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a2e:	b10a      	cbz	r2, 8004a34 <_svfiprintf_r+0x5c>
 8004a30:	2a25      	cmp	r2, #37	; 0x25
 8004a32:	d1f9      	bne.n	8004a28 <_svfiprintf_r+0x50>
 8004a34:	ebba 0b04 	subs.w	fp, sl, r4
 8004a38:	d00b      	beq.n	8004a52 <_svfiprintf_r+0x7a>
 8004a3a:	465b      	mov	r3, fp
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	4629      	mov	r1, r5
 8004a40:	4638      	mov	r0, r7
 8004a42:	f7ff ff6f 	bl	8004924 <__ssputs_r>
 8004a46:	3001      	adds	r0, #1
 8004a48:	f000 80a9 	beq.w	8004b9e <_svfiprintf_r+0x1c6>
 8004a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4e:	445a      	add	r2, fp
 8004a50:	9209      	str	r2, [sp, #36]	; 0x24
 8004a52:	f89a 3000 	ldrb.w	r3, [sl]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 80a1 	beq.w	8004b9e <_svfiprintf_r+0x1c6>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a66:	f10a 0a01 	add.w	sl, sl, #1
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	9307      	str	r3, [sp, #28]
 8004a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a72:	931a      	str	r3, [sp, #104]	; 0x68
 8004a74:	4654      	mov	r4, sl
 8004a76:	2205      	movs	r2, #5
 8004a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7c:	4850      	ldr	r0, [pc, #320]	; (8004bc0 <_svfiprintf_r+0x1e8>)
 8004a7e:	f000 fa67 	bl	8004f50 <memchr>
 8004a82:	9a04      	ldr	r2, [sp, #16]
 8004a84:	b9d8      	cbnz	r0, 8004abe <_svfiprintf_r+0xe6>
 8004a86:	06d0      	lsls	r0, r2, #27
 8004a88:	bf44      	itt	mi
 8004a8a:	2320      	movmi	r3, #32
 8004a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a90:	0711      	lsls	r1, r2, #28
 8004a92:	bf44      	itt	mi
 8004a94:	232b      	movmi	r3, #43	; 0x2b
 8004a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa0:	d015      	beq.n	8004ace <_svfiprintf_r+0xf6>
 8004aa2:	4654      	mov	r4, sl
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f04f 0c0a 	mov.w	ip, #10
 8004aaa:	9a07      	ldr	r2, [sp, #28]
 8004aac:	4621      	mov	r1, r4
 8004aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab2:	3b30      	subs	r3, #48	; 0x30
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	d94d      	bls.n	8004b54 <_svfiprintf_r+0x17c>
 8004ab8:	b1b0      	cbz	r0, 8004ae8 <_svfiprintf_r+0x110>
 8004aba:	9207      	str	r2, [sp, #28]
 8004abc:	e014      	b.n	8004ae8 <_svfiprintf_r+0x110>
 8004abe:	eba0 0308 	sub.w	r3, r0, r8
 8004ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	46a2      	mov	sl, r4
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	e7d2      	b.n	8004a74 <_svfiprintf_r+0x9c>
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	1d19      	adds	r1, r3, #4
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	9103      	str	r1, [sp, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bfbb      	ittet	lt
 8004ada:	425b      	neglt	r3, r3
 8004adc:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae0:	9307      	strge	r3, [sp, #28]
 8004ae2:	9307      	strlt	r3, [sp, #28]
 8004ae4:	bfb8      	it	lt
 8004ae6:	9204      	strlt	r2, [sp, #16]
 8004ae8:	7823      	ldrb	r3, [r4, #0]
 8004aea:	2b2e      	cmp	r3, #46	; 0x2e
 8004aec:	d10c      	bne.n	8004b08 <_svfiprintf_r+0x130>
 8004aee:	7863      	ldrb	r3, [r4, #1]
 8004af0:	2b2a      	cmp	r3, #42	; 0x2a
 8004af2:	d134      	bne.n	8004b5e <_svfiprintf_r+0x186>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	3402      	adds	r4, #2
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	9203      	str	r2, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfb8      	it	lt
 8004b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004bc4 <_svfiprintf_r+0x1ec>
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	4650      	mov	r0, sl
 8004b10:	7821      	ldrb	r1, [r4, #0]
 8004b12:	f000 fa1d 	bl	8004f50 <memchr>
 8004b16:	b138      	cbz	r0, 8004b28 <_svfiprintf_r+0x150>
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	eba0 000a 	sub.w	r0, r0, sl
 8004b20:	4082      	lsls	r2, r0
 8004b22:	4313      	orrs	r3, r2
 8004b24:	3401      	adds	r4, #1
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	4826      	ldr	r0, [pc, #152]	; (8004bc8 <_svfiprintf_r+0x1f0>)
 8004b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b34:	f000 fa0c 	bl	8004f50 <memchr>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d038      	beq.n	8004bae <_svfiprintf_r+0x1d6>
 8004b3c:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <_svfiprintf_r+0x1f4>)
 8004b3e:	bb1b      	cbnz	r3, 8004b88 <_svfiprintf_r+0x1b0>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	3307      	adds	r3, #7
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	3308      	adds	r3, #8
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b4e:	4433      	add	r3, r6
 8004b50:	9309      	str	r3, [sp, #36]	; 0x24
 8004b52:	e768      	b.n	8004a26 <_svfiprintf_r+0x4e>
 8004b54:	460c      	mov	r4, r1
 8004b56:	2001      	movs	r0, #1
 8004b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5c:	e7a6      	b.n	8004aac <_svfiprintf_r+0xd4>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f04f 0c0a 	mov.w	ip, #10
 8004b64:	4619      	mov	r1, r3
 8004b66:	3401      	adds	r4, #1
 8004b68:	9305      	str	r3, [sp, #20]
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b70:	3a30      	subs	r2, #48	; 0x30
 8004b72:	2a09      	cmp	r2, #9
 8004b74:	d903      	bls.n	8004b7e <_svfiprintf_r+0x1a6>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0c6      	beq.n	8004b08 <_svfiprintf_r+0x130>
 8004b7a:	9105      	str	r1, [sp, #20]
 8004b7c:	e7c4      	b.n	8004b08 <_svfiprintf_r+0x130>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2301      	movs	r3, #1
 8004b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b86:	e7f0      	b.n	8004b6a <_svfiprintf_r+0x192>
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	462a      	mov	r2, r5
 8004b8e:	4638      	mov	r0, r7
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <_svfiprintf_r+0x1f8>)
 8004b92:	a904      	add	r1, sp, #16
 8004b94:	f3af 8000 	nop.w
 8004b98:	1c42      	adds	r2, r0, #1
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	d1d6      	bne.n	8004b4c <_svfiprintf_r+0x174>
 8004b9e:	89ab      	ldrh	r3, [r5, #12]
 8004ba0:	065b      	lsls	r3, r3, #25
 8004ba2:	f53f af2d 	bmi.w	8004a00 <_svfiprintf_r+0x28>
 8004ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba8:	b01d      	add	sp, #116	; 0x74
 8004baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bae:	ab03      	add	r3, sp, #12
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <_svfiprintf_r+0x1f8>)
 8004bb8:	a904      	add	r1, sp, #16
 8004bba:	f000 f87d 	bl	8004cb8 <_printf_i>
 8004bbe:	e7eb      	b.n	8004b98 <_svfiprintf_r+0x1c0>
 8004bc0:	080050b0 	.word	0x080050b0
 8004bc4:	080050b6 	.word	0x080050b6
 8004bc8:	080050ba 	.word	0x080050ba
 8004bcc:	00000000 	.word	0x00000000
 8004bd0:	08004925 	.word	0x08004925

08004bd4 <_printf_common>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	4616      	mov	r6, r2
 8004bda:	4699      	mov	r9, r3
 8004bdc:	688a      	ldr	r2, [r1, #8]
 8004bde:	690b      	ldr	r3, [r1, #16]
 8004be0:	4607      	mov	r7, r0
 8004be2:	4293      	cmp	r3, r2
 8004be4:	bfb8      	it	lt
 8004be6:	4613      	movlt	r3, r2
 8004be8:	6033      	str	r3, [r6, #0]
 8004bea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bee:	460c      	mov	r4, r1
 8004bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bf4:	b10a      	cbz	r2, 8004bfa <_printf_common+0x26>
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	6033      	str	r3, [r6, #0]
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	0699      	lsls	r1, r3, #26
 8004bfe:	bf42      	ittt	mi
 8004c00:	6833      	ldrmi	r3, [r6, #0]
 8004c02:	3302      	addmi	r3, #2
 8004c04:	6033      	strmi	r3, [r6, #0]
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	f015 0506 	ands.w	r5, r5, #6
 8004c0c:	d106      	bne.n	8004c1c <_printf_common+0x48>
 8004c0e:	f104 0a19 	add.w	sl, r4, #25
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	6832      	ldr	r2, [r6, #0]
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	42ab      	cmp	r3, r5
 8004c1a:	dc2b      	bgt.n	8004c74 <_printf_common+0xa0>
 8004c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c20:	1e13      	subs	r3, r2, #0
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	bf18      	it	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	0692      	lsls	r2, r2, #26
 8004c2a:	d430      	bmi.n	8004c8e <_printf_common+0xba>
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c34:	47c0      	blx	r8
 8004c36:	3001      	adds	r0, #1
 8004c38:	d023      	beq.n	8004c82 <_printf_common+0xae>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	f003 0306 	and.w	r3, r3, #6
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf14      	ite	ne
 8004c46:	2500      	movne	r5, #0
 8004c48:	6833      	ldreq	r3, [r6, #0]
 8004c4a:	f04f 0600 	mov.w	r6, #0
 8004c4e:	bf08      	it	eq
 8004c50:	68e5      	ldreq	r5, [r4, #12]
 8004c52:	f104 041a 	add.w	r4, r4, #26
 8004c56:	bf08      	it	eq
 8004c58:	1aed      	subeq	r5, r5, r3
 8004c5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c5e:	bf08      	it	eq
 8004c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bfc4      	itt	gt
 8004c68:	1a9b      	subgt	r3, r3, r2
 8004c6a:	18ed      	addgt	r5, r5, r3
 8004c6c:	42b5      	cmp	r5, r6
 8004c6e:	d11a      	bne.n	8004ca6 <_printf_common+0xd2>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e008      	b.n	8004c86 <_printf_common+0xb2>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4652      	mov	r2, sl
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	47c0      	blx	r8
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d103      	bne.n	8004c8a <_printf_common+0xb6>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	e7c1      	b.n	8004c12 <_printf_common+0x3e>
 8004c8e:	2030      	movs	r0, #48	; 0x30
 8004c90:	18e1      	adds	r1, r4, r3
 8004c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c9c:	4422      	add	r2, r4
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ca4:	e7c2      	b.n	8004c2c <_printf_common+0x58>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4649      	mov	r1, r9
 8004cac:	4638      	mov	r0, r7
 8004cae:	47c0      	blx	r8
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d0e6      	beq.n	8004c82 <_printf_common+0xae>
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7d9      	b.n	8004c6c <_printf_common+0x98>

08004cb8 <_printf_i>:
 8004cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	7e0f      	ldrb	r7, [r1, #24]
 8004cbe:	4691      	mov	r9, r2
 8004cc0:	2f78      	cmp	r7, #120	; 0x78
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	469a      	mov	sl, r3
 8004cc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cce:	d807      	bhi.n	8004ce0 <_printf_i+0x28>
 8004cd0:	2f62      	cmp	r7, #98	; 0x62
 8004cd2:	d80a      	bhi.n	8004cea <_printf_i+0x32>
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	f000 80d5 	beq.w	8004e84 <_printf_i+0x1cc>
 8004cda:	2f58      	cmp	r7, #88	; 0x58
 8004cdc:	f000 80c1 	beq.w	8004e62 <_printf_i+0x1aa>
 8004ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ce8:	e03a      	b.n	8004d60 <_printf_i+0xa8>
 8004cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cee:	2b15      	cmp	r3, #21
 8004cf0:	d8f6      	bhi.n	8004ce0 <_printf_i+0x28>
 8004cf2:	a101      	add	r1, pc, #4	; (adr r1, 8004cf8 <_printf_i+0x40>)
 8004cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf8:	08004d51 	.word	0x08004d51
 8004cfc:	08004d65 	.word	0x08004d65
 8004d00:	08004ce1 	.word	0x08004ce1
 8004d04:	08004ce1 	.word	0x08004ce1
 8004d08:	08004ce1 	.word	0x08004ce1
 8004d0c:	08004ce1 	.word	0x08004ce1
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004ce1 	.word	0x08004ce1
 8004d18:	08004ce1 	.word	0x08004ce1
 8004d1c:	08004ce1 	.word	0x08004ce1
 8004d20:	08004ce1 	.word	0x08004ce1
 8004d24:	08004e6b 	.word	0x08004e6b
 8004d28:	08004d91 	.word	0x08004d91
 8004d2c:	08004e25 	.word	0x08004e25
 8004d30:	08004ce1 	.word	0x08004ce1
 8004d34:	08004ce1 	.word	0x08004ce1
 8004d38:	08004e8d 	.word	0x08004e8d
 8004d3c:	08004ce1 	.word	0x08004ce1
 8004d40:	08004d91 	.word	0x08004d91
 8004d44:	08004ce1 	.word	0x08004ce1
 8004d48:	08004ce1 	.word	0x08004ce1
 8004d4c:	08004e2d 	.word	0x08004e2d
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	1d1a      	adds	r2, r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	602a      	str	r2, [r5, #0]
 8004d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0a0      	b.n	8004ea6 <_printf_i+0x1ee>
 8004d64:	6820      	ldr	r0, [r4, #0]
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	0607      	lsls	r7, r0, #24
 8004d6a:	f103 0104 	add.w	r1, r3, #4
 8004d6e:	6029      	str	r1, [r5, #0]
 8004d70:	d501      	bpl.n	8004d76 <_printf_i+0xbe>
 8004d72:	681e      	ldr	r6, [r3, #0]
 8004d74:	e003      	b.n	8004d7e <_printf_i+0xc6>
 8004d76:	0646      	lsls	r6, r0, #25
 8004d78:	d5fb      	bpl.n	8004d72 <_printf_i+0xba>
 8004d7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	da03      	bge.n	8004d8a <_printf_i+0xd2>
 8004d82:	232d      	movs	r3, #45	; 0x2d
 8004d84:	4276      	negs	r6, r6
 8004d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8a:	230a      	movs	r3, #10
 8004d8c:	4859      	ldr	r0, [pc, #356]	; (8004ef4 <_printf_i+0x23c>)
 8004d8e:	e012      	b.n	8004db6 <_printf_i+0xfe>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	6820      	ldr	r0, [r4, #0]
 8004d94:	1d19      	adds	r1, r3, #4
 8004d96:	6029      	str	r1, [r5, #0]
 8004d98:	0605      	lsls	r5, r0, #24
 8004d9a:	d501      	bpl.n	8004da0 <_printf_i+0xe8>
 8004d9c:	681e      	ldr	r6, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <_printf_i+0xee>
 8004da0:	0641      	lsls	r1, r0, #25
 8004da2:	d5fb      	bpl.n	8004d9c <_printf_i+0xe4>
 8004da4:	881e      	ldrh	r6, [r3, #0]
 8004da6:	2f6f      	cmp	r7, #111	; 0x6f
 8004da8:	bf0c      	ite	eq
 8004daa:	2308      	moveq	r3, #8
 8004dac:	230a      	movne	r3, #10
 8004dae:	4851      	ldr	r0, [pc, #324]	; (8004ef4 <_printf_i+0x23c>)
 8004db0:	2100      	movs	r1, #0
 8004db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004db6:	6865      	ldr	r5, [r4, #4]
 8004db8:	2d00      	cmp	r5, #0
 8004dba:	bfa8      	it	ge
 8004dbc:	6821      	ldrge	r1, [r4, #0]
 8004dbe:	60a5      	str	r5, [r4, #8]
 8004dc0:	bfa4      	itt	ge
 8004dc2:	f021 0104 	bicge.w	r1, r1, #4
 8004dc6:	6021      	strge	r1, [r4, #0]
 8004dc8:	b90e      	cbnz	r6, 8004dce <_printf_i+0x116>
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	d04b      	beq.n	8004e66 <_printf_i+0x1ae>
 8004dce:	4615      	mov	r5, r2
 8004dd0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dd4:	fb03 6711 	mls	r7, r3, r1, r6
 8004dd8:	5dc7      	ldrb	r7, [r0, r7]
 8004dda:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dde:	4637      	mov	r7, r6
 8004de0:	42bb      	cmp	r3, r7
 8004de2:	460e      	mov	r6, r1
 8004de4:	d9f4      	bls.n	8004dd0 <_printf_i+0x118>
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d10b      	bne.n	8004e02 <_printf_i+0x14a>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	07de      	lsls	r6, r3, #31
 8004dee:	d508      	bpl.n	8004e02 <_printf_i+0x14a>
 8004df0:	6923      	ldr	r3, [r4, #16]
 8004df2:	6861      	ldr	r1, [r4, #4]
 8004df4:	4299      	cmp	r1, r3
 8004df6:	bfde      	ittt	le
 8004df8:	2330      	movle	r3, #48	; 0x30
 8004dfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e02:	1b52      	subs	r2, r2, r5
 8004e04:	6122      	str	r2, [r4, #16]
 8004e06:	464b      	mov	r3, r9
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f8cd a000 	str.w	sl, [sp]
 8004e10:	aa03      	add	r2, sp, #12
 8004e12:	f7ff fedf 	bl	8004bd4 <_printf_common>
 8004e16:	3001      	adds	r0, #1
 8004e18:	d14a      	bne.n	8004eb0 <_printf_i+0x1f8>
 8004e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1e:	b004      	add	sp, #16
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f043 0320 	orr.w	r3, r3, #32
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	2778      	movs	r7, #120	; 0x78
 8004e2e:	4832      	ldr	r0, [pc, #200]	; (8004ef8 <_printf_i+0x240>)
 8004e30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	6829      	ldr	r1, [r5, #0]
 8004e38:	061f      	lsls	r7, r3, #24
 8004e3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e3e:	d402      	bmi.n	8004e46 <_printf_i+0x18e>
 8004e40:	065f      	lsls	r7, r3, #25
 8004e42:	bf48      	it	mi
 8004e44:	b2b6      	uxthmi	r6, r6
 8004e46:	07df      	lsls	r7, r3, #31
 8004e48:	bf48      	it	mi
 8004e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e4e:	6029      	str	r1, [r5, #0]
 8004e50:	bf48      	it	mi
 8004e52:	6023      	strmi	r3, [r4, #0]
 8004e54:	b91e      	cbnz	r6, 8004e5e <_printf_i+0x1a6>
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	f023 0320 	bic.w	r3, r3, #32
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	2310      	movs	r3, #16
 8004e60:	e7a6      	b.n	8004db0 <_printf_i+0xf8>
 8004e62:	4824      	ldr	r0, [pc, #144]	; (8004ef4 <_printf_i+0x23c>)
 8004e64:	e7e4      	b.n	8004e30 <_printf_i+0x178>
 8004e66:	4615      	mov	r5, r2
 8004e68:	e7bd      	b.n	8004de6 <_printf_i+0x12e>
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	6826      	ldr	r6, [r4, #0]
 8004e6e:	1d18      	adds	r0, r3, #4
 8004e70:	6961      	ldr	r1, [r4, #20]
 8004e72:	6028      	str	r0, [r5, #0]
 8004e74:	0635      	lsls	r5, r6, #24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	d501      	bpl.n	8004e7e <_printf_i+0x1c6>
 8004e7a:	6019      	str	r1, [r3, #0]
 8004e7c:	e002      	b.n	8004e84 <_printf_i+0x1cc>
 8004e7e:	0670      	lsls	r0, r6, #25
 8004e80:	d5fb      	bpl.n	8004e7a <_printf_i+0x1c2>
 8004e82:	8019      	strh	r1, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	4615      	mov	r5, r2
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	e7bc      	b.n	8004e06 <_printf_i+0x14e>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	2100      	movs	r1, #0
 8004e90:	1d1a      	adds	r2, r3, #4
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	681d      	ldr	r5, [r3, #0]
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f859 	bl	8004f50 <memchr>
 8004e9e:	b108      	cbz	r0, 8004ea4 <_printf_i+0x1ec>
 8004ea0:	1b40      	subs	r0, r0, r5
 8004ea2:	6060      	str	r0, [r4, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eae:	e7aa      	b.n	8004e06 <_printf_i+0x14e>
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	47d0      	blx	sl
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d0ad      	beq.n	8004e1a <_printf_i+0x162>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	079b      	lsls	r3, r3, #30
 8004ec2:	d413      	bmi.n	8004eec <_printf_i+0x234>
 8004ec4:	68e0      	ldr	r0, [r4, #12]
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	bfb8      	it	lt
 8004ecc:	4618      	movlt	r0, r3
 8004ece:	e7a6      	b.n	8004e1e <_printf_i+0x166>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4632      	mov	r2, r6
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	47d0      	blx	sl
 8004eda:	3001      	adds	r0, #1
 8004edc:	d09d      	beq.n	8004e1a <_printf_i+0x162>
 8004ede:	3501      	adds	r5, #1
 8004ee0:	68e3      	ldr	r3, [r4, #12]
 8004ee2:	9903      	ldr	r1, [sp, #12]
 8004ee4:	1a5b      	subs	r3, r3, r1
 8004ee6:	42ab      	cmp	r3, r5
 8004ee8:	dcf2      	bgt.n	8004ed0 <_printf_i+0x218>
 8004eea:	e7eb      	b.n	8004ec4 <_printf_i+0x20c>
 8004eec:	2500      	movs	r5, #0
 8004eee:	f104 0619 	add.w	r6, r4, #25
 8004ef2:	e7f5      	b.n	8004ee0 <_printf_i+0x228>
 8004ef4:	080050c1 	.word	0x080050c1
 8004ef8:	080050d2 	.word	0x080050d2

08004efc <memmove>:
 8004efc:	4288      	cmp	r0, r1
 8004efe:	b510      	push	{r4, lr}
 8004f00:	eb01 0402 	add.w	r4, r1, r2
 8004f04:	d902      	bls.n	8004f0c <memmove+0x10>
 8004f06:	4284      	cmp	r4, r0
 8004f08:	4623      	mov	r3, r4
 8004f0a:	d807      	bhi.n	8004f1c <memmove+0x20>
 8004f0c:	1e43      	subs	r3, r0, #1
 8004f0e:	42a1      	cmp	r1, r4
 8004f10:	d008      	beq.n	8004f24 <memmove+0x28>
 8004f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f1a:	e7f8      	b.n	8004f0e <memmove+0x12>
 8004f1c:	4601      	mov	r1, r0
 8004f1e:	4402      	add	r2, r0
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d100      	bne.n	8004f26 <memmove+0x2a>
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f2e:	e7f7      	b.n	8004f20 <memmove+0x24>

08004f30 <_sbrk_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	2300      	movs	r3, #0
 8004f34:	4d05      	ldr	r5, [pc, #20]	; (8004f4c <_sbrk_r+0x1c>)
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f7fb ff90 	bl	8000e60 <_sbrk>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_sbrk_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_sbrk_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	2000035c 	.word	0x2000035c

08004f50 <memchr>:
 8004f50:	4603      	mov	r3, r0
 8004f52:	b510      	push	{r4, lr}
 8004f54:	b2c9      	uxtb	r1, r1
 8004f56:	4402      	add	r2, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	d101      	bne.n	8004f62 <memchr+0x12>
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e003      	b.n	8004f6a <memchr+0x1a>
 8004f62:	7804      	ldrb	r4, [r0, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	428c      	cmp	r4, r1
 8004f68:	d1f6      	bne.n	8004f58 <memchr+0x8>
 8004f6a:	bd10      	pop	{r4, pc}

08004f6c <memcpy>:
 8004f6c:	440a      	add	r2, r1
 8004f6e:	4291      	cmp	r1, r2
 8004f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f74:	d100      	bne.n	8004f78 <memcpy+0xc>
 8004f76:	4770      	bx	lr
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7e:	4291      	cmp	r1, r2
 8004f80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f84:	d1f9      	bne.n	8004f7a <memcpy+0xe>
 8004f86:	bd10      	pop	{r4, pc}

08004f88 <_realloc_r>:
 8004f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	4614      	mov	r4, r2
 8004f90:	460e      	mov	r6, r1
 8004f92:	b921      	cbnz	r1, 8004f9e <_realloc_r+0x16>
 8004f94:	4611      	mov	r1, r2
 8004f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9a:	f7ff bc37 	b.w	800480c <_malloc_r>
 8004f9e:	b92a      	cbnz	r2, 8004fac <_realloc_r+0x24>
 8004fa0:	f7ff fbcc 	bl	800473c <_free_r>
 8004fa4:	4625      	mov	r5, r4
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	f000 f81b 	bl	8004fe6 <_malloc_usable_size_r>
 8004fb0:	4284      	cmp	r4, r0
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	d802      	bhi.n	8004fbc <_realloc_r+0x34>
 8004fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fba:	d812      	bhi.n	8004fe2 <_realloc_r+0x5a>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f7ff fc24 	bl	800480c <_malloc_r>
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d0ed      	beq.n	8004fa6 <_realloc_r+0x1e>
 8004fca:	42bc      	cmp	r4, r7
 8004fcc:	4622      	mov	r2, r4
 8004fce:	4631      	mov	r1, r6
 8004fd0:	bf28      	it	cs
 8004fd2:	463a      	movcs	r2, r7
 8004fd4:	f7ff ffca 	bl	8004f6c <memcpy>
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4640      	mov	r0, r8
 8004fdc:	f7ff fbae 	bl	800473c <_free_r>
 8004fe0:	e7e1      	b.n	8004fa6 <_realloc_r+0x1e>
 8004fe2:	4635      	mov	r5, r6
 8004fe4:	e7df      	b.n	8004fa6 <_realloc_r+0x1e>

08004fe6 <_malloc_usable_size_r>:
 8004fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fea:	1f18      	subs	r0, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bfbc      	itt	lt
 8004ff0:	580b      	ldrlt	r3, [r1, r0]
 8004ff2:	18c0      	addlt	r0, r0, r3
 8004ff4:	4770      	bx	lr
	...

08004ff8 <_init>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	bf00      	nop
 8004ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffe:	bc08      	pop	{r3}
 8005000:	469e      	mov	lr, r3
 8005002:	4770      	bx	lr

08005004 <_fini>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	bf00      	nop
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr
